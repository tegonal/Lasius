/**
 * Lasius - Open source time tracker for teams
 * Copyright (c) Tegonal Genossenschaft (https://tegonal.com)
 *
 * This file is part of Lasius.
 *
 * Lasius is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * Lasius is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Lasius.
 * If not, see <https://www.gnu.org/licenses/>.
 *
 */

/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Lasius API
 * Track your time
 * OpenAPI spec version: 2.0.0-beta4+24-e2734fd1+20250508-0804
 */
import type { Key } from 'swr';

import useSWRMutation from 'swr/mutation';
import type { SWRMutationConfiguration } from 'swr/mutation';

import type { ModelsPersonalDataUpdate, ModelsUser } from '..';

import { lasiusAxiosInstance } from '../../lasiusAxiosInstance';
import type { ErrorType, BodyType } from '../../lasiusAxiosInstance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Change selected user's profile in selected organisation
 */
export const updateUserProfileByOrganisation = (
  orgId: string,
  userId: string,
  modelsPersonalDataUpdate: BodyType<ModelsPersonalDataUpdate>,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsUser>(
    {
      url: `/users/organisations/${orgId}/users/${userId}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsPersonalDataUpdate,
    },
    options
  );
};

export const getUpdateUserProfileByOrganisationMutationFetcher = (
  orgId: string,
  userId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return (_: Key, { arg }: { arg: ModelsPersonalDataUpdate }): Promise<ModelsUser> => {
    return updateUserProfileByOrganisation(orgId, userId, arg, options);
  };
};
export const getUpdateUserProfileByOrganisationMutationKey = (orgId: string, userId: string) =>
  [`/users/organisations/${orgId}/users/${userId}`] as const;

export type UpdateUserProfileByOrganisationMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserProfileByOrganisation>>
>;
export type UpdateUserProfileByOrganisationMutationError = ErrorType<unknown>;

/**
 * @summary Change selected user's profile in selected organisation
 */
export const useUpdateUserProfileByOrganisation = <TError = ErrorType<unknown>>(
  orgId: string,
  userId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof updateUserProfileByOrganisation>>,
      TError,
      Key,
      ModelsPersonalDataUpdate,
      Awaited<ReturnType<typeof updateUserProfileByOrganisation>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getUpdateUserProfileByOrganisationMutationKey(orgId, userId);
  const swrFn = getUpdateUserProfileByOrganisationMutationFetcher(orgId, userId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
