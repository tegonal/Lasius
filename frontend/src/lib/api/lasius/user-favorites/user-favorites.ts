/**
 * Lasius - Open source time tracker for teams
 * Copyright (c) Tegonal Genossenschaft (https://tegonal.com)
 *
 * This file is part of Lasius.
 *
 * Lasius is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * Lasius is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Lasius.
 * If not, see <https://www.gnu.org/licenses/>.
 *
 */

/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Lasius API
 * Track your time
 * OpenAPI spec version: 2.0.1+9-4fc80b82+20250927-2134
 */
import useSwr from 'swr'
import useSWRMutation from 'swr/mutation'

import { lasiusAxiosInstance } from '../../lasiusAxiosInstance'

import type { BodyType, ErrorType } from '../../lasiusAxiosInstance'
import type { ModelsFavoritesRequest, ModelsUserFavorites } from '.././'
import type { Key, SWRConfiguration } from 'swr'
import type { SWRMutationConfiguration } from 'swr/mutation'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary Get current user's favorite bookings list for the selected organisation
 */
export const getFavoriteBookingList = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsUserFavorites>(
    { url: `/user-favorites/organisations/${orgId}`, method: 'GET' },
    options,
  )
}

export const getGetFavoriteBookingListKey = (orgId: string) =>
  [`/user-favorites/organisations/${orgId}`] as const

export type GetFavoriteBookingListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFavoriteBookingList>>
>
export type GetFavoriteBookingListQueryError = ErrorType<unknown>

/**
 * @summary Get current user's favorite bookings list for the selected organisation
 */
export const useGetFavoriteBookingList = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getFavoriteBookingList>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!orgId
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetFavoriteBookingListKey(orgId) : null))
  const swrFn = () => getFavoriteBookingList(orgId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Save a new favorite booking for the current user in the selected organisation
 */
export const addFavoriteBooking = (
  orgId: string,
  modelsFavoritesRequest: BodyType<ModelsFavoritesRequest>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsUserFavorites[]>(
    {
      url: `/user-favorites/organisations/${orgId}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsFavoritesRequest,
    },
    options,
  )
}

export const getAddFavoriteBookingMutationFetcher = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsFavoritesRequest }): Promise<ModelsUserFavorites[]> => {
    return addFavoriteBooking(orgId, arg, options)
  }
}
export const getAddFavoriteBookingMutationKey = (orgId: string) =>
  [`/user-favorites/organisations/${orgId}`] as const

export type AddFavoriteBookingMutationResult = NonNullable<
  Awaited<ReturnType<typeof addFavoriteBooking>>
>
export type AddFavoriteBookingMutationError = ErrorType<unknown>

/**
 * @summary Save a new favorite booking for the current user in the selected organisation
 */
export const useAddFavoriteBooking = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof addFavoriteBooking>>,
      TError,
      Key,
      ModelsFavoritesRequest,
      Awaited<ReturnType<typeof addFavoriteBooking>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAddFavoriteBookingMutationKey(orgId)
  const swrFn = getAddFavoriteBookingMutationFetcher(orgId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Remove a favorite booking for the current user from the selected organisation
 */
export const deleteFavoriteBooking = (
  orgId: string,
  modelsFavoritesRequest: BodyType<ModelsFavoritesRequest>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<null>(
    {
      url: `/user-favorites/organisations/${orgId}`,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      data: modelsFavoritesRequest,
    },
    options,
  )
}

export const getDeleteFavoriteBookingMutationFetcher = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsFavoritesRequest }): Promise<null> => {
    return deleteFavoriteBooking(orgId, arg, options)
  }
}
export const getDeleteFavoriteBookingMutationKey = (orgId: string) =>
  [`/user-favorites/organisations/${orgId}`] as const

export type DeleteFavoriteBookingMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteFavoriteBooking>>
>
export type DeleteFavoriteBookingMutationError = ErrorType<unknown>

/**
 * @summary Remove a favorite booking for the current user from the selected organisation
 */
export const useDeleteFavoriteBooking = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof deleteFavoriteBooking>>,
      TError,
      Key,
      ModelsFavoritesRequest,
      Awaited<ReturnType<typeof deleteFavoriteBooking>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteFavoriteBookingMutationKey(orgId)
  const swrFn = getDeleteFavoriteBookingMutationFetcher(orgId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
