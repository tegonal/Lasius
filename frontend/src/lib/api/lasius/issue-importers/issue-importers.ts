/**
 * Lasius - Open source time tracker for teams
 * Copyright (c) Tegonal Genossenschaft (https://tegonal.com)
 *
 * This file is part of Lasius.
 *
 * Lasius is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * Lasius is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Lasius.
 * If not, see <https://www.gnu.org/licenses/>.
 *
 */

/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Lasius API
 * Track your time
 * OpenAPI spec version: 2.0.1+10-a10445d4+20251012-1746
 */
import useSwr from 'swr'
import useSWRMutation from 'swr/mutation'

import { lasiusAxiosInstance } from '../../lasiusAxiosInstance'

import type { BodyType, ErrorType } from '../../lasiusAxiosInstance'
import type {
  DeleteConfig400,
  DeleteConfig403,
  DeleteConfig404,
  GetConfigsParams,
  ListGithubResourceOwners400,
  ListProjects400,
  ModelsCreateIssueImporterConfig,
  ModelsCreateProjectMapping,
  ModelsIssueImporterConfigId,
  ModelsIssueImporterConfigResponse,
  ModelsListProjectsResponse,
  ModelsUpdateIssueImporterConfig,
  ModelsUpdateProjectMapping,
  RefreshTags202,
  RefreshTags404,
  TestConnectivity200,
  TestConnectivity400,
  TestExistingConfig200,
  TestExistingConfig400,
} from '.././'
import type { Arguments, Key, SWRConfiguration } from 'swr'
import type { SWRMutationConfiguration } from 'swr/mutation'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary Get all importer configurations for organisation (optionally filtered by type)
 */
export const getConfigs = (
  orgId: string,
  params?: GetConfigsParams,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsIssueImporterConfigResponse[]>(
    { url: `/organisations/${orgId}/issue-importers`, method: 'GET', params },
    options,
  )
}

export const getGetConfigsKey = (orgId: string, params?: GetConfigsParams) =>
  [`/organisations/${orgId}/issue-importers`, ...(params ? [params] : [])] as const

export type GetConfigsQueryResult = NonNullable<Awaited<ReturnType<typeof getConfigs>>>
export type GetConfigsQueryError = ErrorType<void>

/**
 * @summary Get all importer configurations for organisation (optionally filtered by type)
 */
export const useGetConfigs = <TError = ErrorType<void>>(
  orgId: string,
  params?: GetConfigsParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getConfigs>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!orgId
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetConfigsKey(orgId, params) : null))
  const swrFn = () => getConfigs(orgId, params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Create new importer configuration (Organisation Admin only)
 */
export const createConfig = (
  orgId: string,
  modelsCreateIssueImporterConfig: BodyType<ModelsCreateIssueImporterConfig>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsIssueImporterConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsCreateIssueImporterConfig,
    },
    options,
  )
}

export const getCreateConfigMutationFetcher = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsCreateIssueImporterConfig }) => {
    return createConfig(orgId, arg, options)
  }
}
export const getCreateConfigMutationKey = (orgId: string) =>
  [`/organisations/${orgId}/issue-importers`] as const

export type CreateConfigMutationResult = NonNullable<Awaited<ReturnType<typeof createConfig>>>
export type CreateConfigMutationError = ErrorType<void | void>

/**
 * @summary Create new importer configuration (Organisation Admin only)
 */
export const useCreateConfig = <TError = ErrorType<void | void>>(
  orgId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof createConfig>>,
      TError,
      Key,
      ModelsCreateIssueImporterConfig,
      Awaited<ReturnType<typeof createConfig>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateConfigMutationKey(orgId)
  const swrFn = getCreateConfigMutationFetcher(orgId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Get importer configuration by ID
 */
export const getConfig = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsIssueImporterConfigResponse>(
    { url: `/organisations/${orgId}/issue-importers/${configId}`, method: 'GET' },
    options,
  )
}

export const getGetConfigKey = (orgId: string, configId: ModelsIssueImporterConfigId) =>
  [`/organisations/${orgId}/issue-importers/${configId}`] as const

export type GetConfigQueryResult = NonNullable<Awaited<ReturnType<typeof getConfig>>>
export type GetConfigQueryError = ErrorType<void | void>

/**
 * @summary Get importer configuration by ID
 */
export const useGetConfig = <TError = ErrorType<void | void>>(
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getConfig>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(orgId && configId)
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetConfigKey(orgId, configId) : null))
  const swrFn = () => getConfig(orgId, configId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Update importer configuration (Organisation Admin only)
 */
export const updateConfig = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  modelsUpdateIssueImporterConfig: BodyType<ModelsUpdateIssueImporterConfig>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsIssueImporterConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/${configId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: modelsUpdateIssueImporterConfig,
    },
    options,
  )
}

export const getUpdateConfigMutationFetcher = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsUpdateIssueImporterConfig }) => {
    return updateConfig(orgId, configId, arg, options)
  }
}
export const getUpdateConfigMutationKey = (orgId: string, configId: ModelsIssueImporterConfigId) =>
  [`/organisations/${orgId}/issue-importers/${configId}`] as const

export type UpdateConfigMutationResult = NonNullable<Awaited<ReturnType<typeof updateConfig>>>
export type UpdateConfigMutationError = ErrorType<void | void | void>

/**
 * @summary Update importer configuration (Organisation Admin only)
 */
export const useUpdateConfig = <TError = ErrorType<void | void | void>>(
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof updateConfig>>,
      TError,
      Key,
      ModelsUpdateIssueImporterConfig,
      Awaited<ReturnType<typeof updateConfig>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdateConfigMutationKey(orgId, configId)
  const swrFn = getUpdateConfigMutationFetcher(orgId, configId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Delete importer configuration (Organisation Admin only)
 */
export const deleteConfig = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<void>(
    { url: `/organisations/${orgId}/issue-importers/${configId}`, method: 'DELETE' },
    options,
  )
}

export const getDeleteConfigMutationFetcher = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, __: { arg: Arguments }) => {
    return deleteConfig(orgId, configId, options)
  }
}
export const getDeleteConfigMutationKey = (orgId: string, configId: ModelsIssueImporterConfigId) =>
  [`/organisations/${orgId}/issue-importers/${configId}`] as const

export type DeleteConfigMutationResult = NonNullable<Awaited<ReturnType<typeof deleteConfig>>>
export type DeleteConfigMutationError = ErrorType<
  DeleteConfig400 | DeleteConfig403 | DeleteConfig404
>

/**
 * @summary Delete importer configuration (Organisation Admin only)
 */
export const useDeleteConfig = <
  TError = ErrorType<DeleteConfig400 | DeleteConfig403 | DeleteConfig404>,
>(
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof deleteConfig>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof deleteConfig>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteConfigMutationKey(orgId, configId)
  const swrFn = getDeleteConfigMutationFetcher(orgId, configId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Get importer configuration for a specific project
 */
export const getConfigForProject = (
  orgId: string,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsIssueImporterConfigResponse>(
    { url: `/organisations/${orgId}/projects/${projectId}/issue-importer`, method: 'GET' },
    options,
  )
}

export const getGetConfigForProjectKey = (orgId: string, projectId: string) =>
  [`/organisations/${orgId}/projects/${projectId}/issue-importer`] as const

export type GetConfigForProjectQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConfigForProject>>
>
export type GetConfigForProjectQueryError = ErrorType<void | void>

/**
 * @summary Get importer configuration for a specific project
 */
export const useGetConfigForProject = <TError = ErrorType<void | void>>(
  orgId: string,
  projectId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getConfigForProject>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(orgId && projectId)
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetConfigForProjectKey(orgId, projectId) : null))
  const swrFn = () => getConfigForProject(orgId, projectId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * Tests connectivity to GitLab/Jira/Plane without saving configuration. Useful for validating credentials before creating a config. Requires only OrganisationMember role since nothing is saved.
 * @summary Test connectivity to external service
 */
export const testConnectivity = (
  orgId: string,
  modelsCreateIssueImporterConfig: BodyType<ModelsCreateIssueImporterConfig>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<TestConnectivity200>(
    {
      url: `/organisations/${orgId}/issue-importers/test`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsCreateIssueImporterConfig,
    },
    options,
  )
}

export const getTestConnectivityMutationFetcher = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsCreateIssueImporterConfig }) => {
    return testConnectivity(orgId, arg, options)
  }
}
export const getTestConnectivityMutationKey = (orgId: string) =>
  [`/organisations/${orgId}/issue-importers/test`] as const

export type TestConnectivityMutationResult = NonNullable<
  Awaited<ReturnType<typeof testConnectivity>>
>
export type TestConnectivityMutationError = ErrorType<TestConnectivity400>

/**
 * @summary Test connectivity to external service
 */
export const useTestConnectivity = <TError = ErrorType<TestConnectivity400>>(
  orgId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof testConnectivity>>,
      TError,
      Key,
      ModelsCreateIssueImporterConfig,
      Awaited<ReturnType<typeof testConnectivity>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getTestConnectivityMutationKey(orgId)
  const swrFn = getTestConnectivityMutationFetcher(orgId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * Tests connectivity to external service using credentials from an existing saved configuration. Useful for validating that saved credentials still work or testing after updating configuration. Requires only OrganisationMember role since nothing is modified.
 * @summary Test connectivity for existing configuration
 */
export const testExistingConfig = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<TestExistingConfig200>(
    { url: `/organisations/${orgId}/issue-importers/${configId}/test`, method: 'POST' },
    options,
  )
}

export const getTestExistingConfigMutationFetcher = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, __: { arg: Arguments }) => {
    return testExistingConfig(orgId, configId, options)
  }
}
export const getTestExistingConfigMutationKey = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
) => [`/organisations/${orgId}/issue-importers/${configId}/test`] as const

export type TestExistingConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof testExistingConfig>>
>
export type TestExistingConfigMutationError = ErrorType<TestExistingConfig400 | void | void>

/**
 * @summary Test connectivity for existing configuration
 */
export const useTestExistingConfig = <TError = ErrorType<TestExistingConfig400 | void | void>>(
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof testExistingConfig>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof testExistingConfig>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getTestExistingConfigMutationKey(orgId, configId)
  const swrFn = getTestExistingConfigMutationFetcher(orgId, configId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * Fetches list of accessible projects/workspaces from the configured external service (GitLab/Jira/Plane). For GitLab and Jira, returns flat list of projects. For Plane, returns hierarchical list of workspaces with their projects. Requires only OrganisationMember role since it only reads from external API.
 * @summary List available projects from external service
 */
export const listProjects = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsListProjectsResponse>(
    { url: `/organisations/${orgId}/issue-importers/${configId}/projects`, method: 'GET' },
    options,
  )
}

export const getListProjectsKey = (orgId: string, configId: ModelsIssueImporterConfigId) =>
  [`/organisations/${orgId}/issue-importers/${configId}/projects`] as const

export type ListProjectsQueryResult = NonNullable<Awaited<ReturnType<typeof listProjects>>>
export type ListProjectsQueryError = ErrorType<ListProjects400 | void | void>

/**
 * @summary List available projects from external service
 */
export const useListProjects = <TError = ErrorType<ListProjects400 | void | void>>(
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof listProjects>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(orgId && configId)
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getListProjectsKey(orgId, configId) : null))
  const swrFn = () => listProjects(orgId, configId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Add project mapping to configuration (Organisation Admin only)
 */
export const addProjectMapping = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  modelsCreateProjectMapping: BodyType<ModelsCreateProjectMapping>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsIssueImporterConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/${configId}/projects`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsCreateProjectMapping,
    },
    options,
  )
}

export const getAddProjectMappingMutationFetcher = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsCreateProjectMapping }) => {
    return addProjectMapping(orgId, configId, arg, options)
  }
}
export const getAddProjectMappingMutationKey = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
) => [`/organisations/${orgId}/issue-importers/${configId}/projects`] as const

export type AddProjectMappingMutationResult = NonNullable<
  Awaited<ReturnType<typeof addProjectMapping>>
>
export type AddProjectMappingMutationError = ErrorType<void | void | void>

/**
 * @summary Add project mapping to configuration (Organisation Admin only)
 */
export const useAddProjectMapping = <TError = ErrorType<void | void | void>>(
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof addProjectMapping>>,
      TError,
      Key,
      ModelsCreateProjectMapping,
      Awaited<ReturnType<typeof addProjectMapping>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAddProjectMappingMutationKey(orgId, configId)
  const swrFn = getAddProjectMappingMutationFetcher(orgId, configId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * Lists available resource owners for a GitHub token. Returns the authenticated user plus all organizations they have access to. This helps users select the correct resource owner when creating organization-scoped fine-grained tokens. GitHub-specific endpoint.
 * @summary List GitHub resource owners (user + organizations)
 */
export const listGithubResourceOwners = (
  orgId: string,
  modelsCreateIssueImporterConfig: BodyType<ModelsCreateIssueImporterConfig>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsListProjectsResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/github/resource-owners`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsCreateIssueImporterConfig,
    },
    options,
  )
}

export const getListGithubResourceOwnersMutationFetcher = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsCreateIssueImporterConfig }) => {
    return listGithubResourceOwners(orgId, arg, options)
  }
}
export const getListGithubResourceOwnersMutationKey = (orgId: string) =>
  [`/organisations/${orgId}/issue-importers/github/resource-owners`] as const

export type ListGithubResourceOwnersMutationResult = NonNullable<
  Awaited<ReturnType<typeof listGithubResourceOwners>>
>
export type ListGithubResourceOwnersMutationError = ErrorType<ListGithubResourceOwners400>

/**
 * @summary List GitHub resource owners (user + organizations)
 */
export const useListGithubResourceOwners = <TError = ErrorType<ListGithubResourceOwners400>>(
  orgId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof listGithubResourceOwners>>,
      TError,
      Key,
      ModelsCreateIssueImporterConfig,
      Awaited<ReturnType<typeof listGithubResourceOwners>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getListGithubResourceOwnersMutationKey(orgId)
  const swrFn = getListGithubResourceOwnersMutationFetcher(orgId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * Triggers an immediate tag refresh for a specific project mapping. Sends a message to the worker to fetch tags from the external service (GitLab/Jira/Plane/GitHub) right away, bypassing the scheduled check interval. Tags will be updated within seconds. Requires only OrganisationMember role as this is a read-like operation.
 * @summary Force immediate tag refresh for a project
 */
export const refreshTags = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<RefreshTags202>(
    {
      url: `/organisations/${orgId}/issue-importers/${configId}/projects/${projectId}/refresh-tags`,
      method: 'POST',
    },
    options,
  )
}

export const getRefreshTagsMutationFetcher = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, __: { arg: Arguments }) => {
    return refreshTags(orgId, configId, projectId, options)
  }
}
export const getRefreshTagsMutationKey = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  projectId: string,
) =>
  [
    `/organisations/${orgId}/issue-importers/${configId}/projects/${projectId}/refresh-tags`,
  ] as const

export type RefreshTagsMutationResult = NonNullable<Awaited<ReturnType<typeof refreshTags>>>
export type RefreshTagsMutationError = ErrorType<void | RefreshTags404>

/**
 * @summary Force immediate tag refresh for a project
 */
export const useRefreshTags = <TError = ErrorType<void | RefreshTags404>>(
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  projectId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof refreshTags>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof refreshTags>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getRefreshTagsMutationKey(orgId, configId, projectId)
  const swrFn = getRefreshTagsMutationFetcher(orgId, configId, projectId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Update project mapping in configuration (Organisation Admin only)
 */
export const updateProjectMapping = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  projectId: string,
  modelsUpdateProjectMapping: BodyType<ModelsUpdateProjectMapping>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsIssueImporterConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/${configId}/projects/${projectId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: modelsUpdateProjectMapping,
    },
    options,
  )
}

export const getUpdateProjectMappingMutationFetcher = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsUpdateProjectMapping }) => {
    return updateProjectMapping(orgId, configId, projectId, arg, options)
  }
}
export const getUpdateProjectMappingMutationKey = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  projectId: string,
) => [`/organisations/${orgId}/issue-importers/${configId}/projects/${projectId}`] as const

export type UpdateProjectMappingMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateProjectMapping>>
>
export type UpdateProjectMappingMutationError = ErrorType<void | void | void>

/**
 * @summary Update project mapping in configuration (Organisation Admin only)
 */
export const useUpdateProjectMapping = <TError = ErrorType<void | void | void>>(
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  projectId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof updateProjectMapping>>,
      TError,
      Key,
      ModelsUpdateProjectMapping,
      Awaited<ReturnType<typeof updateProjectMapping>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey =
    swrOptions?.swrKey ?? getUpdateProjectMappingMutationKey(orgId, configId, projectId)
  const swrFn = getUpdateProjectMappingMutationFetcher(orgId, configId, projectId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Remove project mapping from configuration (Organisation Admin only)
 */
export const removeProjectMapping = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsIssueImporterConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/${configId}/projects/${projectId}`,
      method: 'DELETE',
    },
    options,
  )
}

export const getRemoveProjectMappingMutationFetcher = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, __: { arg: Arguments }) => {
    return removeProjectMapping(orgId, configId, projectId, options)
  }
}
export const getRemoveProjectMappingMutationKey = (
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  projectId: string,
) => [`/organisations/${orgId}/issue-importers/${configId}/projects/${projectId}`] as const

export type RemoveProjectMappingMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeProjectMapping>>
>
export type RemoveProjectMappingMutationError = ErrorType<void | void>

/**
 * @summary Remove project mapping from configuration (Organisation Admin only)
 */
export const useRemoveProjectMapping = <TError = ErrorType<void | void>>(
  orgId: string,
  configId: ModelsIssueImporterConfigId,
  projectId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof removeProjectMapping>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof removeProjectMapping>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey =
    swrOptions?.swrKey ?? getRemoveProjectMappingMutationKey(orgId, configId, projectId)
  const swrFn = getRemoveProjectMappingMutationFetcher(orgId, configId, projectId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
