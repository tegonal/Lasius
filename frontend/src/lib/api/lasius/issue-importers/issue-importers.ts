/**
 * Lasius - Open source time tracker for teams
 * Copyright (c) Tegonal Genossenschaft (https://tegonal.com)
 *
 * This file is part of Lasius.
 *
 * Lasius is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * Lasius is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Lasius.
 * If not, see <https://www.gnu.org/licenses/>.
 *
 */

/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Lasius API
 * Track your time
 * OpenAPI spec version: 2.1.0-beta1+1-0d7f0490+20251005-1445
 */
import useSwr from 'swr'
import useSWRMutation from 'swr/mutation'

import { lasiusAxiosInstance } from '../../lasiusAxiosInstance'

import type { BodyType, ErrorType } from '../../lasiusAxiosInstance'
import type {
  ModelsCreateGitlabConfig,
  ModelsCreateJiraConfig,
  ModelsCreatePlaneConfig,
  ModelsGitlabConfigId,
  ModelsGitlabConfigResponse,
  ModelsGitlabProjectMapping,
  ModelsGitlabProjectSettings,
  ModelsJiraConfigId,
  ModelsJiraConfigResponse,
  ModelsJiraProjectMapping,
  ModelsJiraProjectSettings,
  ModelsPlaneConfigId,
  ModelsPlaneConfigResponse,
  ModelsPlaneProjectMapping,
  ModelsPlaneProjectSettings,
  ModelsUpdateGitlabConfig,
  ModelsUpdateJiraConfig,
  ModelsUpdatePlaneConfig,
} from '.././'
import type { Arguments, Key, SWRConfiguration } from 'swr'
import type { SWRMutationConfiguration } from 'swr/mutation'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary Get all GitLab importer configurations for organisation
 */
export const getGitlabConfigs = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsGitlabConfigResponse[]>(
    { url: `/organisations/${orgId}/issue-importers/gitlab`, method: 'GET' },
    options,
  )
}

export const getGetGitlabConfigsKey = (orgId: string) =>
  [`/organisations/${orgId}/issue-importers/gitlab`] as const

export type GetGitlabConfigsQueryResult = NonNullable<Awaited<ReturnType<typeof getGitlabConfigs>>>
export type GetGitlabConfigsQueryError = ErrorType<unknown>

/**
 * @summary Get all GitLab importer configurations for organisation
 */
export const useGetGitlabConfigs = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getGitlabConfigs>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!orgId
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetGitlabConfigsKey(orgId) : null))
  const swrFn = () => getGitlabConfigs(orgId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Create new GitLab importer configuration (Organisation Admin only)
 */
export const createGitlabConfig = (
  orgId: string,
  modelsCreateGitlabConfig: BodyType<ModelsCreateGitlabConfig>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsGitlabConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/gitlab`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsCreateGitlabConfig,
    },
    options,
  )
}

export const getCreateGitlabConfigMutationFetcher = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsCreateGitlabConfig }) => {
    return createGitlabConfig(orgId, arg, options)
  }
}
export const getCreateGitlabConfigMutationKey = (orgId: string) =>
  [`/organisations/${orgId}/issue-importers/gitlab`] as const

export type CreateGitlabConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof createGitlabConfig>>
>
export type CreateGitlabConfigMutationError = ErrorType<unknown>

/**
 * @summary Create new GitLab importer configuration (Organisation Admin only)
 */
export const useCreateGitlabConfig = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof createGitlabConfig>>,
      TError,
      Key,
      ModelsCreateGitlabConfig,
      Awaited<ReturnType<typeof createGitlabConfig>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateGitlabConfigMutationKey(orgId)
  const swrFn = getCreateGitlabConfigMutationFetcher(orgId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Get GitLab importer configuration by ID
 */
export const getGitlabConfig = (
  orgId: string,
  id: ModelsGitlabConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsGitlabConfigResponse>(
    { url: `/organisations/${orgId}/issue-importers/gitlab/${id}`, method: 'GET' },
    options,
  )
}

export const getGetGitlabConfigKey = (orgId: string, id: ModelsGitlabConfigId) =>
  [`/organisations/${orgId}/issue-importers/gitlab/${id}`] as const

export type GetGitlabConfigQueryResult = NonNullable<Awaited<ReturnType<typeof getGitlabConfig>>>
export type GetGitlabConfigQueryError = ErrorType<void>

/**
 * @summary Get GitLab importer configuration by ID
 */
export const useGetGitlabConfig = <TError = ErrorType<void>>(
  orgId: string,
  id: ModelsGitlabConfigId,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getGitlabConfig>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(orgId && id)
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetGitlabConfigKey(orgId, id) : null))
  const swrFn = () => getGitlabConfig(orgId, id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Update GitLab importer configuration (Organisation Admin only)
 */
export const updateGitlabConfig = (
  orgId: string,
  id: ModelsGitlabConfigId,
  modelsUpdateGitlabConfig: BodyType<ModelsUpdateGitlabConfig>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsGitlabConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/gitlab/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsUpdateGitlabConfig,
    },
    options,
  )
}

export const getUpdateGitlabConfigMutationFetcher = (
  orgId: string,
  id: ModelsGitlabConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsUpdateGitlabConfig }) => {
    return updateGitlabConfig(orgId, id, arg, options)
  }
}
export const getUpdateGitlabConfigMutationKey = (orgId: string, id: ModelsGitlabConfigId) =>
  [`/organisations/${orgId}/issue-importers/gitlab/${id}`] as const

export type UpdateGitlabConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateGitlabConfig>>
>
export type UpdateGitlabConfigMutationError = ErrorType<unknown>

/**
 * @summary Update GitLab importer configuration (Organisation Admin only)
 */
export const useUpdateGitlabConfig = <TError = ErrorType<unknown>>(
  orgId: string,
  id: ModelsGitlabConfigId,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof updateGitlabConfig>>,
      TError,
      Key,
      ModelsUpdateGitlabConfig,
      Awaited<ReturnType<typeof updateGitlabConfig>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdateGitlabConfigMutationKey(orgId, id)
  const swrFn = getUpdateGitlabConfigMutationFetcher(orgId, id, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Delete GitLab importer configuration (Organisation Admin only)
 */
export const deleteGitlabConfig = (
  orgId: string,
  id: ModelsGitlabConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<void>(
    { url: `/organisations/${orgId}/issue-importers/gitlab/${id}`, method: 'DELETE' },
    options,
  )
}

export const getDeleteGitlabConfigMutationFetcher = (
  orgId: string,
  id: ModelsGitlabConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, __: { arg: Arguments }) => {
    return deleteGitlabConfig(orgId, id, options)
  }
}
export const getDeleteGitlabConfigMutationKey = (orgId: string, id: ModelsGitlabConfigId) =>
  [`/organisations/${orgId}/issue-importers/gitlab/${id}`] as const

export type DeleteGitlabConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteGitlabConfig>>
>
export type DeleteGitlabConfigMutationError = ErrorType<unknown>

/**
 * @summary Delete GitLab importer configuration (Organisation Admin only)
 */
export const useDeleteGitlabConfig = <TError = ErrorType<unknown>>(
  orgId: string,
  id: ModelsGitlabConfigId,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof deleteGitlabConfig>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof deleteGitlabConfig>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteGitlabConfigMutationKey(orgId, id)
  const swrFn = getDeleteGitlabConfigMutationFetcher(orgId, id, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Get GitLab importer configuration for a specific project
 */
export const getGitlabConfigForProject = (
  orgId: string,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsGitlabConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/gitlab/for-project/${projectId}`,
      method: 'GET',
    },
    options,
  )
}

export const getGetGitlabConfigForProjectKey = (orgId: string, projectId: string) =>
  [`/organisations/${orgId}/issue-importers/gitlab/for-project/${projectId}`] as const

export type GetGitlabConfigForProjectQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGitlabConfigForProject>>
>
export type GetGitlabConfigForProjectQueryError = ErrorType<void>

/**
 * @summary Get GitLab importer configuration for a specific project
 */
export const useGetGitlabConfigForProject = <TError = ErrorType<void>>(
  orgId: string,
  projectId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getGitlabConfigForProject>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(orgId && projectId)
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetGitlabConfigForProjectKey(orgId, projectId) : null))
  const swrFn = () => getGitlabConfigForProject(orgId, projectId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Add project mapping to GitLab configuration (Organisation Admin only)
 */
export const addGitlabProjectMapping = (
  orgId: string,
  id: ModelsGitlabConfigId,
  modelsGitlabProjectMapping: BodyType<ModelsGitlabProjectMapping>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsGitlabConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/gitlab/${id}/projects`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsGitlabProjectMapping,
    },
    options,
  )
}

export const getAddGitlabProjectMappingMutationFetcher = (
  orgId: string,
  id: ModelsGitlabConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsGitlabProjectMapping }) => {
    return addGitlabProjectMapping(orgId, id, arg, options)
  }
}
export const getAddGitlabProjectMappingMutationKey = (orgId: string, id: ModelsGitlabConfigId) =>
  [`/organisations/${orgId}/issue-importers/gitlab/${id}/projects`] as const

export type AddGitlabProjectMappingMutationResult = NonNullable<
  Awaited<ReturnType<typeof addGitlabProjectMapping>>
>
export type AddGitlabProjectMappingMutationError = ErrorType<unknown>

/**
 * @summary Add project mapping to GitLab configuration (Organisation Admin only)
 */
export const useAddGitlabProjectMapping = <TError = ErrorType<unknown>>(
  orgId: string,
  id: ModelsGitlabConfigId,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof addGitlabProjectMapping>>,
      TError,
      Key,
      ModelsGitlabProjectMapping,
      Awaited<ReturnType<typeof addGitlabProjectMapping>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAddGitlabProjectMappingMutationKey(orgId, id)
  const swrFn = getAddGitlabProjectMappingMutationFetcher(orgId, id, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Remove project mapping from GitLab configuration (Organisation Admin only)
 */
export const removeGitlabProjectMapping = (
  orgId: string,
  id: ModelsGitlabConfigId,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsGitlabConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/gitlab/${id}/projects/${projectId}`,
      method: 'DELETE',
    },
    options,
  )
}

export const getRemoveGitlabProjectMappingMutationFetcher = (
  orgId: string,
  id: ModelsGitlabConfigId,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, __: { arg: Arguments }) => {
    return removeGitlabProjectMapping(orgId, id, projectId, options)
  }
}
export const getRemoveGitlabProjectMappingMutationKey = (
  orgId: string,
  id: ModelsGitlabConfigId,
  projectId: string,
) => [`/organisations/${orgId}/issue-importers/gitlab/${id}/projects/${projectId}`] as const

export type RemoveGitlabProjectMappingMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeGitlabProjectMapping>>
>
export type RemoveGitlabProjectMappingMutationError = ErrorType<unknown>

/**
 * @summary Remove project mapping from GitLab configuration (Organisation Admin only)
 */
export const useRemoveGitlabProjectMapping = <TError = ErrorType<unknown>>(
  orgId: string,
  id: ModelsGitlabConfigId,
  projectId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof removeGitlabProjectMapping>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof removeGitlabProjectMapping>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey =
    swrOptions?.swrKey ?? getRemoveGitlabProjectMappingMutationKey(orgId, id, projectId)
  const swrFn = getRemoveGitlabProjectMappingMutationFetcher(orgId, id, projectId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Update project mapping settings in GitLab configuration (Organisation Admin only)
 */
export const updateGitlabProjectMapping = (
  orgId: string,
  id: ModelsGitlabConfigId,
  projectId: string,
  modelsGitlabProjectSettings: BodyType<ModelsGitlabProjectSettings>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsGitlabConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/gitlab/${id}/projects/${projectId}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsGitlabProjectSettings,
    },
    options,
  )
}

export const getUpdateGitlabProjectMappingMutationFetcher = (
  orgId: string,
  id: ModelsGitlabConfigId,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsGitlabProjectSettings }) => {
    return updateGitlabProjectMapping(orgId, id, projectId, arg, options)
  }
}
export const getUpdateGitlabProjectMappingMutationKey = (
  orgId: string,
  id: ModelsGitlabConfigId,
  projectId: string,
) => [`/organisations/${orgId}/issue-importers/gitlab/${id}/projects/${projectId}`] as const

export type UpdateGitlabProjectMappingMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateGitlabProjectMapping>>
>
export type UpdateGitlabProjectMappingMutationError = ErrorType<unknown>

/**
 * @summary Update project mapping settings in GitLab configuration (Organisation Admin only)
 */
export const useUpdateGitlabProjectMapping = <TError = ErrorType<unknown>>(
  orgId: string,
  id: ModelsGitlabConfigId,
  projectId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof updateGitlabProjectMapping>>,
      TError,
      Key,
      ModelsGitlabProjectSettings,
      Awaited<ReturnType<typeof updateGitlabProjectMapping>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey =
    swrOptions?.swrKey ?? getUpdateGitlabProjectMappingMutationKey(orgId, id, projectId)
  const swrFn = getUpdateGitlabProjectMappingMutationFetcher(orgId, id, projectId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Get all Jira importer configurations for organisation
 */
export const getJiraConfigs = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsJiraConfigResponse[]>(
    { url: `/organisations/${orgId}/issue-importers/jira`, method: 'GET' },
    options,
  )
}

export const getGetJiraConfigsKey = (orgId: string) =>
  [`/organisations/${orgId}/issue-importers/jira`] as const

export type GetJiraConfigsQueryResult = NonNullable<Awaited<ReturnType<typeof getJiraConfigs>>>
export type GetJiraConfigsQueryError = ErrorType<unknown>

/**
 * @summary Get all Jira importer configurations for organisation
 */
export const useGetJiraConfigs = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getJiraConfigs>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!orgId
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetJiraConfigsKey(orgId) : null))
  const swrFn = () => getJiraConfigs(orgId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Create new Jira importer configuration (Organisation Admin only)
 */
export const createJiraConfig = (
  orgId: string,
  modelsCreateJiraConfig: BodyType<ModelsCreateJiraConfig>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsJiraConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/jira`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsCreateJiraConfig,
    },
    options,
  )
}

export const getCreateJiraConfigMutationFetcher = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsCreateJiraConfig }) => {
    return createJiraConfig(orgId, arg, options)
  }
}
export const getCreateJiraConfigMutationKey = (orgId: string) =>
  [`/organisations/${orgId}/issue-importers/jira`] as const

export type CreateJiraConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof createJiraConfig>>
>
export type CreateJiraConfigMutationError = ErrorType<unknown>

/**
 * @summary Create new Jira importer configuration (Organisation Admin only)
 */
export const useCreateJiraConfig = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof createJiraConfig>>,
      TError,
      Key,
      ModelsCreateJiraConfig,
      Awaited<ReturnType<typeof createJiraConfig>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateJiraConfigMutationKey(orgId)
  const swrFn = getCreateJiraConfigMutationFetcher(orgId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Get Jira importer configuration by ID
 */
export const getJiraConfig = (
  orgId: string,
  id: ModelsJiraConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsJiraConfigResponse>(
    { url: `/organisations/${orgId}/issue-importers/jira/${id}`, method: 'GET' },
    options,
  )
}

export const getGetJiraConfigKey = (orgId: string, id: ModelsJiraConfigId) =>
  [`/organisations/${orgId}/issue-importers/jira/${id}`] as const

export type GetJiraConfigQueryResult = NonNullable<Awaited<ReturnType<typeof getJiraConfig>>>
export type GetJiraConfigQueryError = ErrorType<void>

/**
 * @summary Get Jira importer configuration by ID
 */
export const useGetJiraConfig = <TError = ErrorType<void>>(
  orgId: string,
  id: ModelsJiraConfigId,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getJiraConfig>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(orgId && id)
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetJiraConfigKey(orgId, id) : null))
  const swrFn = () => getJiraConfig(orgId, id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Update Jira importer configuration (Organisation Admin only)
 */
export const updateJiraConfig = (
  orgId: string,
  id: ModelsJiraConfigId,
  modelsUpdateJiraConfig: BodyType<ModelsUpdateJiraConfig>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsJiraConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/jira/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsUpdateJiraConfig,
    },
    options,
  )
}

export const getUpdateJiraConfigMutationFetcher = (
  orgId: string,
  id: ModelsJiraConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsUpdateJiraConfig }) => {
    return updateJiraConfig(orgId, id, arg, options)
  }
}
export const getUpdateJiraConfigMutationKey = (orgId: string, id: ModelsJiraConfigId) =>
  [`/organisations/${orgId}/issue-importers/jira/${id}`] as const

export type UpdateJiraConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateJiraConfig>>
>
export type UpdateJiraConfigMutationError = ErrorType<unknown>

/**
 * @summary Update Jira importer configuration (Organisation Admin only)
 */
export const useUpdateJiraConfig = <TError = ErrorType<unknown>>(
  orgId: string,
  id: ModelsJiraConfigId,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof updateJiraConfig>>,
      TError,
      Key,
      ModelsUpdateJiraConfig,
      Awaited<ReturnType<typeof updateJiraConfig>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdateJiraConfigMutationKey(orgId, id)
  const swrFn = getUpdateJiraConfigMutationFetcher(orgId, id, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Delete Jira importer configuration (Organisation Admin only)
 */
export const deleteJiraConfig = (
  orgId: string,
  id: ModelsJiraConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<void>(
    { url: `/organisations/${orgId}/issue-importers/jira/${id}`, method: 'DELETE' },
    options,
  )
}

export const getDeleteJiraConfigMutationFetcher = (
  orgId: string,
  id: ModelsJiraConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, __: { arg: Arguments }) => {
    return deleteJiraConfig(orgId, id, options)
  }
}
export const getDeleteJiraConfigMutationKey = (orgId: string, id: ModelsJiraConfigId) =>
  [`/organisations/${orgId}/issue-importers/jira/${id}`] as const

export type DeleteJiraConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteJiraConfig>>
>
export type DeleteJiraConfigMutationError = ErrorType<unknown>

/**
 * @summary Delete Jira importer configuration (Organisation Admin only)
 */
export const useDeleteJiraConfig = <TError = ErrorType<unknown>>(
  orgId: string,
  id: ModelsJiraConfigId,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof deleteJiraConfig>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof deleteJiraConfig>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteJiraConfigMutationKey(orgId, id)
  const swrFn = getDeleteJiraConfigMutationFetcher(orgId, id, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Get Jira importer configuration for a specific project
 */
export const getJiraConfigForProject = (
  orgId: string,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsJiraConfigResponse>(
    { url: `/organisations/${orgId}/issue-importers/jira/for-project/${projectId}`, method: 'GET' },
    options,
  )
}

export const getGetJiraConfigForProjectKey = (orgId: string, projectId: string) =>
  [`/organisations/${orgId}/issue-importers/jira/for-project/${projectId}`] as const

export type GetJiraConfigForProjectQueryResult = NonNullable<
  Awaited<ReturnType<typeof getJiraConfigForProject>>
>
export type GetJiraConfigForProjectQueryError = ErrorType<void>

/**
 * @summary Get Jira importer configuration for a specific project
 */
export const useGetJiraConfigForProject = <TError = ErrorType<void>>(
  orgId: string,
  projectId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getJiraConfigForProject>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(orgId && projectId)
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetJiraConfigForProjectKey(orgId, projectId) : null))
  const swrFn = () => getJiraConfigForProject(orgId, projectId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Add project mapping to Jira configuration (Organisation Admin only)
 */
export const addJiraProjectMapping = (
  orgId: string,
  id: ModelsJiraConfigId,
  modelsJiraProjectMapping: BodyType<ModelsJiraProjectMapping>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsJiraConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/jira/${id}/projects`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsJiraProjectMapping,
    },
    options,
  )
}

export const getAddJiraProjectMappingMutationFetcher = (
  orgId: string,
  id: ModelsJiraConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsJiraProjectMapping }) => {
    return addJiraProjectMapping(orgId, id, arg, options)
  }
}
export const getAddJiraProjectMappingMutationKey = (orgId: string, id: ModelsJiraConfigId) =>
  [`/organisations/${orgId}/issue-importers/jira/${id}/projects`] as const

export type AddJiraProjectMappingMutationResult = NonNullable<
  Awaited<ReturnType<typeof addJiraProjectMapping>>
>
export type AddJiraProjectMappingMutationError = ErrorType<unknown>

/**
 * @summary Add project mapping to Jira configuration (Organisation Admin only)
 */
export const useAddJiraProjectMapping = <TError = ErrorType<unknown>>(
  orgId: string,
  id: ModelsJiraConfigId,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof addJiraProjectMapping>>,
      TError,
      Key,
      ModelsJiraProjectMapping,
      Awaited<ReturnType<typeof addJiraProjectMapping>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAddJiraProjectMappingMutationKey(orgId, id)
  const swrFn = getAddJiraProjectMappingMutationFetcher(orgId, id, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Remove project mapping from Jira configuration (Organisation Admin only)
 */
export const removeJiraProjectMapping = (
  orgId: string,
  id: ModelsJiraConfigId,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsJiraConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/jira/${id}/projects/${projectId}`,
      method: 'DELETE',
    },
    options,
  )
}

export const getRemoveJiraProjectMappingMutationFetcher = (
  orgId: string,
  id: ModelsJiraConfigId,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, __: { arg: Arguments }) => {
    return removeJiraProjectMapping(orgId, id, projectId, options)
  }
}
export const getRemoveJiraProjectMappingMutationKey = (
  orgId: string,
  id: ModelsJiraConfigId,
  projectId: string,
) => [`/organisations/${orgId}/issue-importers/jira/${id}/projects/${projectId}`] as const

export type RemoveJiraProjectMappingMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeJiraProjectMapping>>
>
export type RemoveJiraProjectMappingMutationError = ErrorType<unknown>

/**
 * @summary Remove project mapping from Jira configuration (Organisation Admin only)
 */
export const useRemoveJiraProjectMapping = <TError = ErrorType<unknown>>(
  orgId: string,
  id: ModelsJiraConfigId,
  projectId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof removeJiraProjectMapping>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof removeJiraProjectMapping>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getRemoveJiraProjectMappingMutationKey(orgId, id, projectId)
  const swrFn = getRemoveJiraProjectMappingMutationFetcher(orgId, id, projectId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Update project mapping settings in Jira configuration (Organisation Admin only)
 */
export const updateJiraProjectMapping = (
  orgId: string,
  id: ModelsJiraConfigId,
  projectId: string,
  modelsJiraProjectSettings: BodyType<ModelsJiraProjectSettings>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsJiraConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/jira/${id}/projects/${projectId}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsJiraProjectSettings,
    },
    options,
  )
}

export const getUpdateJiraProjectMappingMutationFetcher = (
  orgId: string,
  id: ModelsJiraConfigId,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsJiraProjectSettings }) => {
    return updateJiraProjectMapping(orgId, id, projectId, arg, options)
  }
}
export const getUpdateJiraProjectMappingMutationKey = (
  orgId: string,
  id: ModelsJiraConfigId,
  projectId: string,
) => [`/organisations/${orgId}/issue-importers/jira/${id}/projects/${projectId}`] as const

export type UpdateJiraProjectMappingMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateJiraProjectMapping>>
>
export type UpdateJiraProjectMappingMutationError = ErrorType<unknown>

/**
 * @summary Update project mapping settings in Jira configuration (Organisation Admin only)
 */
export const useUpdateJiraProjectMapping = <TError = ErrorType<unknown>>(
  orgId: string,
  id: ModelsJiraConfigId,
  projectId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof updateJiraProjectMapping>>,
      TError,
      Key,
      ModelsJiraProjectSettings,
      Awaited<ReturnType<typeof updateJiraProjectMapping>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdateJiraProjectMappingMutationKey(orgId, id, projectId)
  const swrFn = getUpdateJiraProjectMappingMutationFetcher(orgId, id, projectId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Get all Plane importer configurations for organisation
 */
export const getPlaneConfigs = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsPlaneConfigResponse[]>(
    { url: `/organisations/${orgId}/issue-importers/plane`, method: 'GET' },
    options,
  )
}

export const getGetPlaneConfigsKey = (orgId: string) =>
  [`/organisations/${orgId}/issue-importers/plane`] as const

export type GetPlaneConfigsQueryResult = NonNullable<Awaited<ReturnType<typeof getPlaneConfigs>>>
export type GetPlaneConfigsQueryError = ErrorType<unknown>

/**
 * @summary Get all Plane importer configurations for organisation
 */
export const useGetPlaneConfigs = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getPlaneConfigs>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!orgId
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetPlaneConfigsKey(orgId) : null))
  const swrFn = () => getPlaneConfigs(orgId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Create new Plane importer configuration (Organisation Admin only)
 */
export const createPlaneConfig = (
  orgId: string,
  modelsCreatePlaneConfig: BodyType<ModelsCreatePlaneConfig>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsPlaneConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/plane`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsCreatePlaneConfig,
    },
    options,
  )
}

export const getCreatePlaneConfigMutationFetcher = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsCreatePlaneConfig }) => {
    return createPlaneConfig(orgId, arg, options)
  }
}
export const getCreatePlaneConfigMutationKey = (orgId: string) =>
  [`/organisations/${orgId}/issue-importers/plane`] as const

export type CreatePlaneConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof createPlaneConfig>>
>
export type CreatePlaneConfigMutationError = ErrorType<unknown>

/**
 * @summary Create new Plane importer configuration (Organisation Admin only)
 */
export const useCreatePlaneConfig = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof createPlaneConfig>>,
      TError,
      Key,
      ModelsCreatePlaneConfig,
      Awaited<ReturnType<typeof createPlaneConfig>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreatePlaneConfigMutationKey(orgId)
  const swrFn = getCreatePlaneConfigMutationFetcher(orgId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Get Plane importer configuration by ID
 */
export const getPlaneConfig = (
  orgId: string,
  id: ModelsPlaneConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsPlaneConfigResponse>(
    { url: `/organisations/${orgId}/issue-importers/plane/${id}`, method: 'GET' },
    options,
  )
}

export const getGetPlaneConfigKey = (orgId: string, id: ModelsPlaneConfigId) =>
  [`/organisations/${orgId}/issue-importers/plane/${id}`] as const

export type GetPlaneConfigQueryResult = NonNullable<Awaited<ReturnType<typeof getPlaneConfig>>>
export type GetPlaneConfigQueryError = ErrorType<void>

/**
 * @summary Get Plane importer configuration by ID
 */
export const useGetPlaneConfig = <TError = ErrorType<void>>(
  orgId: string,
  id: ModelsPlaneConfigId,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getPlaneConfig>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(orgId && id)
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetPlaneConfigKey(orgId, id) : null))
  const swrFn = () => getPlaneConfig(orgId, id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Update Plane importer configuration (Organisation Admin only)
 */
export const updatePlaneConfig = (
  orgId: string,
  id: ModelsPlaneConfigId,
  modelsUpdatePlaneConfig: BodyType<ModelsUpdatePlaneConfig>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsPlaneConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/plane/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsUpdatePlaneConfig,
    },
    options,
  )
}

export const getUpdatePlaneConfigMutationFetcher = (
  orgId: string,
  id: ModelsPlaneConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsUpdatePlaneConfig }) => {
    return updatePlaneConfig(orgId, id, arg, options)
  }
}
export const getUpdatePlaneConfigMutationKey = (orgId: string, id: ModelsPlaneConfigId) =>
  [`/organisations/${orgId}/issue-importers/plane/${id}`] as const

export type UpdatePlaneConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof updatePlaneConfig>>
>
export type UpdatePlaneConfigMutationError = ErrorType<unknown>

/**
 * @summary Update Plane importer configuration (Organisation Admin only)
 */
export const useUpdatePlaneConfig = <TError = ErrorType<unknown>>(
  orgId: string,
  id: ModelsPlaneConfigId,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof updatePlaneConfig>>,
      TError,
      Key,
      ModelsUpdatePlaneConfig,
      Awaited<ReturnType<typeof updatePlaneConfig>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdatePlaneConfigMutationKey(orgId, id)
  const swrFn = getUpdatePlaneConfigMutationFetcher(orgId, id, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Delete Plane importer configuration (Organisation Admin only)
 */
export const deletePlaneConfig = (
  orgId: string,
  id: ModelsPlaneConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<void>(
    { url: `/organisations/${orgId}/issue-importers/plane/${id}`, method: 'DELETE' },
    options,
  )
}

export const getDeletePlaneConfigMutationFetcher = (
  orgId: string,
  id: ModelsPlaneConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, __: { arg: Arguments }) => {
    return deletePlaneConfig(orgId, id, options)
  }
}
export const getDeletePlaneConfigMutationKey = (orgId: string, id: ModelsPlaneConfigId) =>
  [`/organisations/${orgId}/issue-importers/plane/${id}`] as const

export type DeletePlaneConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePlaneConfig>>
>
export type DeletePlaneConfigMutationError = ErrorType<unknown>

/**
 * @summary Delete Plane importer configuration (Organisation Admin only)
 */
export const useDeletePlaneConfig = <TError = ErrorType<unknown>>(
  orgId: string,
  id: ModelsPlaneConfigId,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof deletePlaneConfig>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof deletePlaneConfig>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeletePlaneConfigMutationKey(orgId, id)
  const swrFn = getDeletePlaneConfigMutationFetcher(orgId, id, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Get Plane importer configuration for a specific project
 */
export const getPlaneConfigForProject = (
  orgId: string,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsPlaneConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/plane/for-project/${projectId}`,
      method: 'GET',
    },
    options,
  )
}

export const getGetPlaneConfigForProjectKey = (orgId: string, projectId: string) =>
  [`/organisations/${orgId}/issue-importers/plane/for-project/${projectId}`] as const

export type GetPlaneConfigForProjectQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPlaneConfigForProject>>
>
export type GetPlaneConfigForProjectQueryError = ErrorType<void>

/**
 * @summary Get Plane importer configuration for a specific project
 */
export const useGetPlaneConfigForProject = <TError = ErrorType<void>>(
  orgId: string,
  projectId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getPlaneConfigForProject>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(orgId && projectId)
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetPlaneConfigForProjectKey(orgId, projectId) : null))
  const swrFn = () => getPlaneConfigForProject(orgId, projectId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Add project mapping to Plane configuration (Organisation Admin only)
 */
export const addPlaneProjectMapping = (
  orgId: string,
  id: ModelsPlaneConfigId,
  modelsPlaneProjectMapping: BodyType<ModelsPlaneProjectMapping>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsPlaneConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/plane/${id}/projects`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsPlaneProjectMapping,
    },
    options,
  )
}

export const getAddPlaneProjectMappingMutationFetcher = (
  orgId: string,
  id: ModelsPlaneConfigId,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsPlaneProjectMapping }) => {
    return addPlaneProjectMapping(orgId, id, arg, options)
  }
}
export const getAddPlaneProjectMappingMutationKey = (orgId: string, id: ModelsPlaneConfigId) =>
  [`/organisations/${orgId}/issue-importers/plane/${id}/projects`] as const

export type AddPlaneProjectMappingMutationResult = NonNullable<
  Awaited<ReturnType<typeof addPlaneProjectMapping>>
>
export type AddPlaneProjectMappingMutationError = ErrorType<unknown>

/**
 * @summary Add project mapping to Plane configuration (Organisation Admin only)
 */
export const useAddPlaneProjectMapping = <TError = ErrorType<unknown>>(
  orgId: string,
  id: ModelsPlaneConfigId,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof addPlaneProjectMapping>>,
      TError,
      Key,
      ModelsPlaneProjectMapping,
      Awaited<ReturnType<typeof addPlaneProjectMapping>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAddPlaneProjectMappingMutationKey(orgId, id)
  const swrFn = getAddPlaneProjectMappingMutationFetcher(orgId, id, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Remove project mapping from Plane configuration (Organisation Admin only)
 */
export const removePlaneProjectMapping = (
  orgId: string,
  id: ModelsPlaneConfigId,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsPlaneConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/plane/${id}/projects/${projectId}`,
      method: 'DELETE',
    },
    options,
  )
}

export const getRemovePlaneProjectMappingMutationFetcher = (
  orgId: string,
  id: ModelsPlaneConfigId,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, __: { arg: Arguments }) => {
    return removePlaneProjectMapping(orgId, id, projectId, options)
  }
}
export const getRemovePlaneProjectMappingMutationKey = (
  orgId: string,
  id: ModelsPlaneConfigId,
  projectId: string,
) => [`/organisations/${orgId}/issue-importers/plane/${id}/projects/${projectId}`] as const

export type RemovePlaneProjectMappingMutationResult = NonNullable<
  Awaited<ReturnType<typeof removePlaneProjectMapping>>
>
export type RemovePlaneProjectMappingMutationError = ErrorType<unknown>

/**
 * @summary Remove project mapping from Plane configuration (Organisation Admin only)
 */
export const useRemovePlaneProjectMapping = <TError = ErrorType<unknown>>(
  orgId: string,
  id: ModelsPlaneConfigId,
  projectId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof removePlaneProjectMapping>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof removePlaneProjectMapping>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getRemovePlaneProjectMappingMutationKey(orgId, id, projectId)
  const swrFn = getRemovePlaneProjectMappingMutationFetcher(orgId, id, projectId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Update project mapping settings in Plane configuration (Organisation Admin only)
 */
export const updatePlaneProjectMapping = (
  orgId: string,
  id: ModelsPlaneConfigId,
  projectId: string,
  modelsPlaneProjectSettings: BodyType<ModelsPlaneProjectSettings>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsPlaneConfigResponse>(
    {
      url: `/organisations/${orgId}/issue-importers/plane/${id}/projects/${projectId}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsPlaneProjectSettings,
    },
    options,
  )
}

export const getUpdatePlaneProjectMappingMutationFetcher = (
  orgId: string,
  id: ModelsPlaneConfigId,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsPlaneProjectSettings }) => {
    return updatePlaneProjectMapping(orgId, id, projectId, arg, options)
  }
}
export const getUpdatePlaneProjectMappingMutationKey = (
  orgId: string,
  id: ModelsPlaneConfigId,
  projectId: string,
) => [`/organisations/${orgId}/issue-importers/plane/${id}/projects/${projectId}`] as const

export type UpdatePlaneProjectMappingMutationResult = NonNullable<
  Awaited<ReturnType<typeof updatePlaneProjectMapping>>
>
export type UpdatePlaneProjectMappingMutationError = ErrorType<unknown>

/**
 * @summary Update project mapping settings in Plane configuration (Organisation Admin only)
 */
export const useUpdatePlaneProjectMapping = <TError = ErrorType<unknown>>(
  orgId: string,
  id: ModelsPlaneConfigId,
  projectId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof updatePlaneProjectMapping>>,
      TError,
      Key,
      ModelsPlaneProjectSettings,
      Awaited<ReturnType<typeof updatePlaneProjectMapping>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdatePlaneProjectMappingMutationKey(orgId, id, projectId)
  const swrFn = getUpdatePlaneProjectMappingMutationFetcher(orgId, id, projectId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
