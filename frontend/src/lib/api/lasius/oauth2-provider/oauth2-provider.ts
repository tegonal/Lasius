/**
 * Lasius - Open source time tracker for teams
 * Copyright (c) Tegonal Genossenschaft (https://tegonal.com)
 *
 * This file is part of Lasius.
 *
 * Lasius is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * Lasius is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Lasius.
 * If not, see <https://www.gnu.org/licenses/>.
 *
 */

/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Lasius API
 * Track your time
 * OpenAPI spec version: 2.1.3+0-5a9b540e+20251016-0430
 */
import useSwr from 'swr'
import useSWRMutation from 'swr/mutation'

import { lasiusAxiosInstance } from '../../lasiusAxiosInstance'

import type { BodyType, ErrorType } from '../../lasiusAxiosInstance'
import type {
  ModelsOAuthAuthorizationCodeLoginRequest,
  ModelsOAuthUser,
  ModelsOAuthUserId,
  ModelsOAuthUserRegistration,
  ModelsPasswordChangeRequest,
} from '.././'
import type { Arguments, Key, SWRConfiguration } from 'swr'
import type { SWRMutationConfiguration } from 'swr/mutation'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary --------please annotate------
 */
export const registerOAuthUser = (
  modelsOAuthUserRegistration: BodyType<ModelsOAuthUserRegistration>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsOAuthUserId>(
    {
      url: `/oauth2/user/register`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsOAuthUserRegistration,
    },
    options,
  )
}

export const getRegisterOAuthUserMutationFetcher = (
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsOAuthUserRegistration }) => {
    return registerOAuthUser(arg, options)
  }
}
export const getRegisterOAuthUserMutationKey = () => [`/oauth2/user/register`] as const

export type RegisterOAuthUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerOAuthUser>>
>
export type RegisterOAuthUserMutationError = ErrorType<unknown>

/**
 * @summary --------please annotate------
 */
export const useRegisterOAuthUser = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof registerOAuthUser>>,
    TError,
    Key,
    ModelsOAuthUserRegistration,
    Awaited<ReturnType<typeof registerOAuthUser>>
  > & { swrKey?: string }
  request?: SecondParameter<typeof lasiusAxiosInstance>
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getRegisterOAuthUserMutationKey()
  const swrFn = getRegisterOAuthUserMutationFetcher(requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Change current user's password
 */
export const updateUserPassword = (
  modelsPasswordChangeRequest: BodyType<ModelsPasswordChangeRequest>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<void>(
    {
      url: `/oauth2/user/update-password`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsPasswordChangeRequest,
    },
    options,
  )
}

export const getUpdateUserPasswordMutationFetcher = (
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsPasswordChangeRequest }) => {
    return updateUserPassword(arg, options)
  }
}
export const getUpdateUserPasswordMutationKey = () => [`/oauth2/user/update-password`] as const

export type UpdateUserPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserPassword>>
>
export type UpdateUserPasswordMutationError = ErrorType<unknown>

/**
 * @summary Change current user's password
 */
export const useUpdateUserPassword = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof updateUserPassword>>,
    TError,
    Key,
    ModelsPasswordChangeRequest,
    Awaited<ReturnType<typeof updateUserPassword>>
  > & { swrKey?: string }
  request?: SecondParameter<typeof lasiusAxiosInstance>
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdateUserPasswordMutationKey()
  const swrFn = getUpdateUserPasswordMutationFetcher(requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary access to internally provided oauth2 provider. Use for demo purposes only!
 */
export const oauthAccessToken = (options?: SecondParameter<typeof lasiusAxiosInstance>) => {
  return lasiusAxiosInstance<void>({ url: `/oauth2/access_token`, method: 'POST' }, options)
}

export const getOauthAccessTokenMutationFetcher = (
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, __: { arg: Arguments }) => {
    return oauthAccessToken(options)
  }
}
export const getOauthAccessTokenMutationKey = () => [`/oauth2/access_token`] as const

export type OauthAccessTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof oauthAccessToken>>
>
export type OauthAccessTokenMutationError = ErrorType<unknown>

/**
 * @summary access to internally provided oauth2 provider. Use for demo purposes only!
 */
export const useOauthAccessToken = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof oauthAccessToken>>,
    TError,
    Key,
    Arguments,
    Awaited<ReturnType<typeof oauthAccessToken>>
  > & { swrKey?: string }
  request?: SecondParameter<typeof lasiusAxiosInstance>
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getOauthAccessTokenMutationKey()
  const swrFn = getOauthAccessTokenMutationFetcher(requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary login to the oauth provider with the authorization code flow
 */
export const login = (
  modelsOAuthAuthorizationCodeLoginRequest: BodyType<ModelsOAuthAuthorizationCodeLoginRequest>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<unknown>(
    {
      url: `/oauth2/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsOAuthAuthorizationCodeLoginRequest,
    },
    options,
  )
}

export const getLoginMutationFetcher = (options?: SecondParameter<typeof lasiusAxiosInstance>) => {
  return (_: Key, { arg }: { arg: ModelsOAuthAuthorizationCodeLoginRequest }) => {
    return login(arg, options)
  }
}
export const getLoginMutationKey = () => [`/oauth2/login`] as const

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
export type LoginMutationError = ErrorType<void>

/**
 * @summary login to the oauth provider with the authorization code flow
 */
export const useLogin = <TError = ErrorType<void>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof login>>,
    TError,
    Key,
    ModelsOAuthAuthorizationCodeLoginRequest,
    Awaited<ReturnType<typeof login>>
  > & { swrKey?: string }
  request?: SecondParameter<typeof lasiusAxiosInstance>
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getLoginMutationKey()
  const swrFn = getLoginMutationFetcher(requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary logout from the internal oauth provider, token will not be valid anymore afterwards
 */
export const logout = (options?: SecondParameter<typeof lasiusAxiosInstance>) => {
  return lasiusAxiosInstance<void>({ url: `/oauth2/logout`, method: 'POST' }, options)
}

export const getLogoutMutationFetcher = (options?: SecondParameter<typeof lasiusAxiosInstance>) => {
  return (_: Key, __: { arg: Arguments }) => {
    return logout(options)
  }
}
export const getLogoutMutationKey = () => [`/oauth2/logout`] as const

export type LogoutMutationResult = NonNullable<Awaited<ReturnType<typeof logout>>>
export type LogoutMutationError = ErrorType<unknown>

/**
 * @summary logout from the internal oauth provider, token will not be valid anymore afterwards
 */
export const useLogout = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof logout>>,
    TError,
    Key,
    Arguments,
    Awaited<ReturnType<typeof logout>>
  > & { swrKey?: string }
  request?: SecondParameter<typeof lasiusAxiosInstance>
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getLogoutMutationKey()
  const swrFn = getLogoutMutationFetcher(requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary access to internally provided oauth2 provider. Use for demo purposes only!
 */
export const getUOAuthUserProfile = (options?: SecondParameter<typeof lasiusAxiosInstance>) => {
  return lasiusAxiosInstance<ModelsOAuthUser>({ url: `/oauth2/profile`, method: 'GET' }, options)
}

export const getGetUOAuthUserProfileKey = () => [`/oauth2/profile`] as const

export type GetUOAuthUserProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUOAuthUserProfile>>
>
export type GetUOAuthUserProfileQueryError = ErrorType<unknown>

/**
 * @summary access to internally provided oauth2 provider. Use for demo purposes only!
 */
export const useGetUOAuthUserProfile = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getUOAuthUserProfile>>, TError> & {
    swrKey?: Key
    enabled?: boolean
  }
  request?: SecondParameter<typeof lasiusAxiosInstance>
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetUOAuthUserProfileKey() : null))
  const swrFn = () => getUOAuthUserProfile(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
