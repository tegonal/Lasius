/**
 * Lasius - Open source time tracker for teams
 * Copyright (c) Tegonal Genossenschaft (https://tegonal.com)
 *
 * This file is part of Lasius.
 *
 * Lasius is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * Lasius is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Lasius.
 * If not, see <https://www.gnu.org/licenses/>.
 *
 */

/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Lasius API
 * Track your time
 * OpenAPI spec version: 2.1.0-beta1+1-0d7f0490+20251005-1445
 */
import useSwr from 'swr'
import useSWRMutation from 'swr/mutation'

import { lasiusAxiosInstance } from '../../lasiusAxiosInstance'

import type { BodyType, ErrorType } from '../../lasiusAxiosInstance'
import type {
  ModelsAcceptTOSRequest,
  ModelsPersonalDataUpdate,
  ModelsUser,
  ModelsUserSettings,
} from '.././'
import type { Key, SWRConfiguration } from 'swr'
import type { SWRMutationConfiguration } from 'swr/mutation'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary Get current user's profile
 */
export const getUserProfile = (options?: SecondParameter<typeof lasiusAxiosInstance>) => {
  return lasiusAxiosInstance<ModelsUser>({ url: `/user/profile`, method: 'GET' }, options)
}

export const getGetUserProfileKey = () => [`/user/profile`] as const

export type GetUserProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getUserProfile>>>
export type GetUserProfileQueryError = ErrorType<unknown>

/**
 * @summary Get current user's profile
 */
export const useGetUserProfile = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getUserProfile>>, TError> & {
    swrKey?: Key
    enabled?: boolean
  }
  request?: SecondParameter<typeof lasiusAxiosInstance>
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetUserProfileKey() : null))
  const swrFn = () => getUserProfile(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Change current user's profile
 */
export const updateUserProfile = (
  modelsPersonalDataUpdate: BodyType<ModelsPersonalDataUpdate>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsUser>(
    {
      url: `/user/profile`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsPersonalDataUpdate,
    },
    options,
  )
}

export const getUpdateUserProfileMutationFetcher = (
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsPersonalDataUpdate }) => {
    return updateUserProfile(arg, options)
  }
}
export const getUpdateUserProfileMutationKey = () => [`/user/profile`] as const

export type UpdateUserProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserProfile>>
>
export type UpdateUserProfileMutationError = ErrorType<unknown>

/**
 * @summary Change current user's profile
 */
export const useUpdateUserProfile = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof updateUserProfile>>,
    TError,
    Key,
    ModelsPersonalDataUpdate,
    Awaited<ReturnType<typeof updateUserProfile>>
  > & { swrKey?: string }
  request?: SecondParameter<typeof lasiusAxiosInstance>
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdateUserProfileMutationKey()
  const swrFn = getUpdateUserProfileMutationFetcher(requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Change current user's settings
 */
export const updateUserSettings = (
  modelsUserSettings: BodyType<ModelsUserSettings>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsUser>(
    {
      url: `/user/profile/settings`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsUserSettings,
    },
    options,
  )
}

export const getUpdateUserSettingsMutationFetcher = (
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsUserSettings }) => {
    return updateUserSettings(arg, options)
  }
}
export const getUpdateUserSettingsMutationKey = () => [`/user/profile/settings`] as const

export type UpdateUserSettingsMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserSettings>>
>
export type UpdateUserSettingsMutationError = ErrorType<unknown>

/**
 * @summary Change current user's settings
 */
export const useUpdateUserSettings = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof updateUserSettings>>,
    TError,
    Key,
    ModelsUserSettings,
    Awaited<ReturnType<typeof updateUserSettings>>
  > & { swrKey?: string }
  request?: SecondParameter<typeof lasiusAxiosInstance>
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdateUserSettingsMutationKey()
  const swrFn = getUpdateUserSettingsMutationFetcher(requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Accept terms of service (TOS)
 */
export const acceptUserTOS = (
  modelsAcceptTOSRequest: BodyType<ModelsAcceptTOSRequest>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsUser>(
    {
      url: `/user/accept-tos`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsAcceptTOSRequest,
    },
    options,
  )
}

export const getAcceptUserTOSMutationFetcher = (
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsAcceptTOSRequest }) => {
    return acceptUserTOS(arg, options)
  }
}
export const getAcceptUserTOSMutationKey = () => [`/user/accept-tos`] as const

export type AcceptUserTOSMutationResult = NonNullable<Awaited<ReturnType<typeof acceptUserTOS>>>
export type AcceptUserTOSMutationError = ErrorType<unknown>

/**
 * @summary Accept terms of service (TOS)
 */
export const useAcceptUserTOS = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof acceptUserTOS>>,
    TError,
    Key,
    ModelsAcceptTOSRequest,
    Awaited<ReturnType<typeof acceptUserTOS>>
  > & { swrKey?: string }
  request?: SecondParameter<typeof lasiusAxiosInstance>
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAcceptUserTOSMutationKey()
  const swrFn = getAcceptUserTOSMutationFetcher(requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
