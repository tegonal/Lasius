/**
 * Lasius - Open source time tracker for teams
 * Copyright (c) Tegonal Genossenschaft (https://tegonal.com)
 *
 * This file is part of Lasius.
 *
 * Lasius is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * Lasius is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Lasius.
 * If not, see <https://www.gnu.org/licenses/>.
 *
 */

/**
 * Generated by orval v7.4.0 üç∫
 * Do not edit manually.
 * Lasius API
 * Track your time
 * OpenAPI spec version: 1.1.0+15-0f9d0d82+20250206-0746
 */
import useSwr from 'swr';
import type { Arguments, Key, SWRConfiguration } from 'swr';
import useSWRMutation from 'swr/mutation';
import type { SWRMutationConfiguration } from 'swr/mutation';
import type {
  ModelsCreateProject,
  ModelsInvitationResult,
  ModelsProject,
  ModelsUpdateProject,
  ModelsUserStub,
  ModelsUserToProjectAssignment,
} from '..';
import { lasiusAxiosInstance } from '../../lasiusAxiosInstance';
import type { ErrorType, BodyType } from '../../lasiusAxiosInstance';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getProjectList = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsProject[]>(
    { url: `/organisations/${orgId}/projects`, method: 'GET' },
    options
  );
};

export const getGetProjectListKey = (orgId: string) =>
  [`/organisations/${orgId}/projects`] as const;

export type GetProjectListQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectList>>>;
export type GetProjectListQueryError = ErrorType<unknown>;

export const useGetProjectList = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getProjectList>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!orgId;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetProjectListKey(orgId) : null));
  const swrFn = () => getProjectList(orgId, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
export const createProject = (
  orgId: string,
  modelsCreateProject: BodyType<ModelsCreateProject>,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsProject>(
    {
      url: `/organisations/${orgId}/projects`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsCreateProject,
    },
    options
  );
};

export const getCreateProjectMutationFetcher = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return (_: Key, { arg }: { arg: ModelsCreateProject }): Promise<ModelsProject> => {
    return createProject(orgId, arg, options);
  };
};
export const getCreateProjectMutationKey = (orgId: string) =>
  [`/organisations/${orgId}/projects`] as const;

export type CreateProjectMutationResult = NonNullable<Awaited<ReturnType<typeof createProject>>>;
export type CreateProjectMutationError = ErrorType<unknown>;

export const useCreateProject = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof createProject>>,
      TError,
      Key,
      ModelsCreateProject,
      Awaited<ReturnType<typeof createProject>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getCreateProjectMutationKey(orgId);
  const swrFn = getCreateProjectMutationFetcher(orgId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary update a project
 */
export const updateProject = (
  orgId: string,
  projectId: string,
  modelsUpdateProject: BodyType<ModelsUpdateProject>,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsProject>(
    {
      url: `/organisations/${orgId}/projects/${projectId}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsUpdateProject,
    },
    options
  );
};

export const getUpdateProjectMutationFetcher = (
  orgId: string,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return (_: Key, { arg }: { arg: ModelsUpdateProject }): Promise<ModelsProject> => {
    return updateProject(orgId, projectId, arg, options);
  };
};
export const getUpdateProjectMutationKey = (orgId: string, projectId: string) =>
  [`/organisations/${orgId}/projects/${projectId}`] as const;

export type UpdateProjectMutationResult = NonNullable<Awaited<ReturnType<typeof updateProject>>>;
export type UpdateProjectMutationError = ErrorType<unknown>;

/**
 * @summary update a project
 */
export const useUpdateProject = <TError = ErrorType<unknown>>(
  orgId: string,
  projectId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof updateProject>>,
      TError,
      Key,
      ModelsUpdateProject,
      Awaited<ReturnType<typeof updateProject>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getUpdateProjectMutationKey(orgId, projectId);
  const swrFn = getUpdateProjectMutationFetcher(orgId, projectId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Deactivate a project
 */
export const deactivateProject = (
  orgId: string,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<void>(
    { url: `/organisations/${orgId}/projects/${projectId}`, method: 'DELETE' },
    options
  );
};

export const getDeactivateProjectMutationFetcher = (
  orgId: string,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deactivateProject(orgId, projectId, options);
  };
};
export const getDeactivateProjectMutationKey = (orgId: string, projectId: string) =>
  [`/organisations/${orgId}/projects/${projectId}`] as const;

export type DeactivateProjectMutationResult = NonNullable<
  Awaited<ReturnType<typeof deactivateProject>>
>;
export type DeactivateProjectMutationError = ErrorType<unknown>;

/**
 * @summary Deactivate a project
 */
export const useDeactivateProject = <TError = ErrorType<unknown>>(
  orgId: string,
  projectId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof deactivateProject>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof deactivateProject>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getDeactivateProjectMutationKey(orgId, projectId);
  const swrFn = getDeactivateProjectMutationFetcher(orgId, projectId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
export const getProjectUserList = (
  orgId: string,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsUserStub[]>(
    { url: `/organisations/${orgId}/projects/${projectId}/users`, method: 'GET' },
    options
  );
};

export const getGetProjectUserListKey = (orgId: string, projectId: string) =>
  [`/organisations/${orgId}/projects/${projectId}/users`] as const;

export type GetProjectUserListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProjectUserList>>
>;
export type GetProjectUserListQueryError = ErrorType<unknown>;

export const useGetProjectUserList = <TError = ErrorType<unknown>>(
  orgId: string,
  projectId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getProjectUserList>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!(orgId && projectId);
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetProjectUserListKey(orgId, projectId) : null));
  const swrFn = () => getProjectUserList(orgId, projectId, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
export const inviteProjectUser = (
  orgId: string,
  projectId: string,
  modelsUserToProjectAssignment: BodyType<ModelsUserToProjectAssignment>,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsInvitationResult>(
    {
      url: `/organisations/${orgId}/projects/${projectId}/users`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsUserToProjectAssignment,
    },
    options
  );
};

export const getInviteProjectUserMutationFetcher = (
  orgId: string,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return (
    _: Key,
    { arg }: { arg: ModelsUserToProjectAssignment }
  ): Promise<ModelsInvitationResult> => {
    return inviteProjectUser(orgId, projectId, arg, options);
  };
};
export const getInviteProjectUserMutationKey = (orgId: string, projectId: string) =>
  [`/organisations/${orgId}/projects/${projectId}/users`] as const;

export type InviteProjectUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof inviteProjectUser>>
>;
export type InviteProjectUserMutationError = ErrorType<unknown>;

export const useInviteProjectUser = <TError = ErrorType<unknown>>(
  orgId: string,
  projectId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof inviteProjectUser>>,
      TError,
      Key,
      ModelsUserToProjectAssignment,
      Awaited<ReturnType<typeof inviteProjectUser>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getInviteProjectUserMutationKey(orgId, projectId);
  const swrFn = getInviteProjectUserMutationFetcher(orgId, projectId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
export const removeProjectUser = (
  orgId: string,
  projectId: string,
  userId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<void>(
    { url: `/organisations/${orgId}/projects/${projectId}/users/${userId}`, method: 'DELETE' },
    options
  );
};

export const getRemoveProjectUserMutationFetcher = (
  orgId: string,
  projectId: string,
  userId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return removeProjectUser(orgId, projectId, userId, options);
  };
};
export const getRemoveProjectUserMutationKey = (orgId: string, projectId: string, userId: string) =>
  [`/organisations/${orgId}/projects/${projectId}/users/${userId}`] as const;

export type RemoveProjectUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeProjectUser>>
>;
export type RemoveProjectUserMutationError = ErrorType<unknown>;

export const useRemoveProjectUser = <TError = ErrorType<unknown>>(
  orgId: string,
  projectId: string,
  userId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof removeProjectUser>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof removeProjectUser>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getRemoveProjectUserMutationKey(orgId, projectId, userId);
  const swrFn = getRemoveProjectUserMutationFetcher(orgId, projectId, userId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Remove current user's membership from selected project and selected organisation
 */
export const removeProjectOwnUser = (
  orgId: string,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<void>(
    { url: `/organisations/${orgId}/projects/${projectId}/leave`, method: 'DELETE' },
    options
  );
};

export const getRemoveProjectOwnUserMutationFetcher = (
  orgId: string,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return removeProjectOwnUser(orgId, projectId, options);
  };
};
export const getRemoveProjectOwnUserMutationKey = (orgId: string, projectId: string) =>
  [`/organisations/${orgId}/projects/${projectId}/leave`] as const;

export type RemoveProjectOwnUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeProjectOwnUser>>
>;
export type RemoveProjectOwnUserMutationError = ErrorType<unknown>;

/**
 * @summary Remove current user's membership from selected project and selected organisation
 */
export const useRemoveProjectOwnUser = <TError = ErrorType<unknown>>(
  orgId: string,
  projectId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof removeProjectOwnUser>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof removeProjectOwnUser>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getRemoveProjectOwnUserMutationKey(orgId, projectId);
  const swrFn = getRemoveProjectOwnUserMutationFetcher(orgId, projectId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
