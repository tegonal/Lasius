/**
 * Lasius - Open source time tracker for teams
 * Copyright (c) Tegonal Genossenschaft (https://tegonal.com)
 *
 * This file is part of Lasius.
 *
 * Lasius is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * Lasius is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Lasius.
 * If not, see <https://www.gnu.org/licenses/>.
 *
 */

/**
 * Generated by orval v7.4.0 üç∫
 * Do not edit manually.
 * Lasius API
 * Track your time
 * OpenAPI spec version: 1.0.10+21-16e4799e
 */
import useSwr from 'swr';
import type { Arguments, Key, SWRConfiguration } from 'swr';
import useSWRMutation from 'swr/mutation';
import type { SWRMutationConfiguration } from 'swr/mutation';
import type {
  GetUserBookingAggregatedStatsByOrganisationParams,
  GetUserBookingLatestListByOrganisationParams,
  GetUserBookingListByOrganisationParams,
  ModelsAddBookingRequest,
  ModelsBooking,
  ModelsBookingChangeStartRequest,
  ModelsBookingStats,
  ModelsCurrentOrganisationTimeBookings,
  ModelsCurrentUserTimeBooking,
  ModelsEditBookingRequest,
  ModelsStartBookingRequest,
  ModelsStopBookingRequest,
} from '..';
import { lasiusAxiosInstance } from '../../lasiusAxiosInstance';
import type { ErrorType, BodyType } from '../../lasiusAxiosInstance';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Start booking time on selected organisation for the current user
 */
export const startUserBookingCurrent = (
  orgId: string,
  modelsStartBookingRequest: BodyType<ModelsStartBookingRequest>,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<void>(
    {
      url: `/user-bookings/organisations/${orgId}/bookings/start`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsStartBookingRequest,
    },
    options
  );
};

export const getStartUserBookingCurrentMutationFetcher = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return (_: Key, { arg }: { arg: ModelsStartBookingRequest }): Promise<void> => {
    return startUserBookingCurrent(orgId, arg, options);
  };
};
export const getStartUserBookingCurrentMutationKey = (orgId: string) =>
  [`/user-bookings/organisations/${orgId}/bookings/start`] as const;

export type StartUserBookingCurrentMutationResult = NonNullable<
  Awaited<ReturnType<typeof startUserBookingCurrent>>
>;
export type StartUserBookingCurrentMutationError = ErrorType<unknown>;

/**
 * @summary Start booking time on selected organisation for the current user
 */
export const useStartUserBookingCurrent = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof startUserBookingCurrent>>,
      TError,
      Key,
      ModelsStartBookingRequest,
      Awaited<ReturnType<typeof startUserBookingCurrent>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getStartUserBookingCurrentMutationKey(orgId);
  const swrFn = getStartUserBookingCurrentMutationFetcher(orgId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Stop the currently running booking by organisation and booking id for the current user
 */
export const stopUserBookingCurrent = (
  orgId: string,
  bookingId: string,
  modelsStopBookingRequest: BodyType<ModelsStopBookingRequest>,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<void>(
    {
      url: `/user-bookings/organisations/${orgId}/bookings/${bookingId}/stop`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsStopBookingRequest,
    },
    options
  );
};

export const getStopUserBookingCurrentMutationFetcher = (
  orgId: string,
  bookingId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return (_: Key, { arg }: { arg: ModelsStopBookingRequest }): Promise<void> => {
    return stopUserBookingCurrent(orgId, bookingId, arg, options);
  };
};
export const getStopUserBookingCurrentMutationKey = (orgId: string, bookingId: string) =>
  [`/user-bookings/organisations/${orgId}/bookings/${bookingId}/stop`] as const;

export type StopUserBookingCurrentMutationResult = NonNullable<
  Awaited<ReturnType<typeof stopUserBookingCurrent>>
>;
export type StopUserBookingCurrentMutationError = ErrorType<unknown>;

/**
 * @summary Stop the currently running booking by organisation and booking id for the current user
 */
export const useStopUserBookingCurrent = <TError = ErrorType<unknown>>(
  orgId: string,
  bookingId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof stopUserBookingCurrent>>,
      TError,
      Key,
      ModelsStopBookingRequest,
      Awaited<ReturnType<typeof stopUserBookingCurrent>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getStopUserBookingCurrentMutationKey(orgId, bookingId);
  const swrFn = getStopUserBookingCurrentMutationFetcher(orgId, bookingId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Change the currently running booking by organisation and booking id for the current user
 */
export const updateUserBookingCurrent = (
  orgId: string,
  bookingId: string,
  modelsBookingChangeStartRequest: BodyType<ModelsBookingChangeStartRequest>,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<void>(
    {
      url: `/user-bookings/organisations/${orgId}/bookings/${bookingId}/start-time`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsBookingChangeStartRequest,
    },
    options
  );
};

export const getUpdateUserBookingCurrentMutationFetcher = (
  orgId: string,
  bookingId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return (_: Key, { arg }: { arg: ModelsBookingChangeStartRequest }): Promise<void> => {
    return updateUserBookingCurrent(orgId, bookingId, arg, options);
  };
};
export const getUpdateUserBookingCurrentMutationKey = (orgId: string, bookingId: string) =>
  [`/user-bookings/organisations/${orgId}/bookings/${bookingId}/start-time`] as const;

export type UpdateUserBookingCurrentMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserBookingCurrent>>
>;
export type UpdateUserBookingCurrentMutationError = ErrorType<unknown>;

/**
 * @summary Change the currently running booking by organisation and booking id for the current user
 */
export const useUpdateUserBookingCurrent = <TError = ErrorType<unknown>>(
  orgId: string,
  bookingId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof updateUserBookingCurrent>>,
      TError,
      Key,
      ModelsBookingChangeStartRequest,
      Awaited<ReturnType<typeof updateUserBookingCurrent>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getUpdateUserBookingCurrentMutationKey(orgId, bookingId);
  const swrFn = getUpdateUserBookingCurrentMutationFetcher(orgId, bookingId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Remove a booking by organisation and booking id for the current user
 */
export const deleteUserBooking = (
  orgId: string,
  bookingId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<void>(
    { url: `/user-bookings/organisations/${orgId}/bookings/${bookingId}`, method: 'DELETE' },
    options
  );
};

export const getDeleteUserBookingMutationFetcher = (
  orgId: string,
  bookingId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deleteUserBooking(orgId, bookingId, options);
  };
};
export const getDeleteUserBookingMutationKey = (orgId: string, bookingId: string) =>
  [`/user-bookings/organisations/${orgId}/bookings/${bookingId}`] as const;

export type DeleteUserBookingMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUserBooking>>
>;
export type DeleteUserBookingMutationError = ErrorType<unknown>;

/**
 * @summary Remove a booking by organisation and booking id for the current user
 */
export const useDeleteUserBooking = <TError = ErrorType<unknown>>(
  orgId: string,
  bookingId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof deleteUserBooking>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof deleteUserBooking>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getDeleteUserBookingMutationKey(orgId, bookingId);
  const swrFn = getDeleteUserBookingMutationFetcher(orgId, bookingId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Change a booking by organisation for the current user
 */
export const updateUserBooking = (
  orgId: string,
  bookingId: string,
  modelsEditBookingRequest: BodyType<ModelsEditBookingRequest>,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<void>(
    {
      url: `/user-bookings/organisations/${orgId}/bookings/${bookingId}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsEditBookingRequest,
    },
    options
  );
};

export const getUpdateUserBookingMutationFetcher = (
  orgId: string,
  bookingId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return (_: Key, { arg }: { arg: ModelsEditBookingRequest }): Promise<void> => {
    return updateUserBooking(orgId, bookingId, arg, options);
  };
};
export const getUpdateUserBookingMutationKey = (orgId: string, bookingId: string) =>
  [`/user-bookings/organisations/${orgId}/bookings/${bookingId}`] as const;

export type UpdateUserBookingMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserBooking>>
>;
export type UpdateUserBookingMutationError = ErrorType<unknown>;

/**
 * @summary Change a booking by organisation for the current user
 */
export const useUpdateUserBooking = <TError = ErrorType<unknown>>(
  orgId: string,
  bookingId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof updateUserBooking>>,
      TError,
      Key,
      ModelsEditBookingRequest,
      Awaited<ReturnType<typeof updateUserBooking>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getUpdateUserBookingMutationKey(orgId, bookingId);
  const swrFn = getUpdateUserBookingMutationFetcher(orgId, bookingId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Create a booking by organisation for the current user
 */
export const addUserBookingByOrganisation = (
  orgId: string,
  modelsAddBookingRequest: BodyType<ModelsAddBookingRequest>,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<void>(
    {
      url: `/user-bookings/organisations/${orgId}/bookings`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsAddBookingRequest,
    },
    options
  );
};

export const getAddUserBookingByOrganisationMutationFetcher = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return (_: Key, { arg }: { arg: ModelsAddBookingRequest }): Promise<void> => {
    return addUserBookingByOrganisation(orgId, arg, options);
  };
};
export const getAddUserBookingByOrganisationMutationKey = (orgId: string) =>
  [`/user-bookings/organisations/${orgId}/bookings`] as const;

export type AddUserBookingByOrganisationMutationResult = NonNullable<
  Awaited<ReturnType<typeof addUserBookingByOrganisation>>
>;
export type AddUserBookingByOrganisationMutationError = ErrorType<unknown>;

/**
 * @summary Create a booking by organisation for the current user
 */
export const useAddUserBookingByOrganisation = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof addUserBookingByOrganisation>>,
      TError,
      Key,
      ModelsAddBookingRequest,
      Awaited<ReturnType<typeof addUserBookingByOrganisation>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getAddUserBookingByOrganisationMutationKey(orgId);
  const swrFn = getAddUserBookingByOrganisationMutationFetcher(orgId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Get current user's booking history for selected organisation
 */
export const getUserBookingListByOrganisation = (
  orgId: string,
  params: GetUserBookingListByOrganisationParams,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsBooking[]>(
    { url: `/user-bookings/organisations/${orgId}/bookings/history`, method: 'GET', params },
    options
  );
};

export const getGetUserBookingListByOrganisationKey = (
  orgId: string,
  params: GetUserBookingListByOrganisationParams
) =>
  [`/user-bookings/organisations/${orgId}/bookings/history`, ...(params ? [params] : [])] as const;

export type GetUserBookingListByOrganisationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserBookingListByOrganisation>>
>;
export type GetUserBookingListByOrganisationQueryError = ErrorType<unknown>;

/**
 * @summary Get current user's booking history for selected organisation
 */
export const useGetUserBookingListByOrganisation = <TError = ErrorType<unknown>>(
  orgId: string,
  params: GetUserBookingListByOrganisationParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getUserBookingListByOrganisation>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!orgId;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetUserBookingListByOrganisationKey(orgId, params) : null));
  const swrFn = () => getUserBookingListByOrganisation(orgId, params, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Get aggregated stats for current user in selected organisation
 */
export const getUserBookingAggregatedStatsByOrganisation = (
  orgId: string,
  params: GetUserBookingAggregatedStatsByOrganisationParams,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsBookingStats[]>(
    {
      url: `/user-bookings/organisations/${orgId}/bookings/stats/aggregated`,
      method: 'GET',
      params,
    },
    options
  );
};

export const getGetUserBookingAggregatedStatsByOrganisationKey = (
  orgId: string,
  params: GetUserBookingAggregatedStatsByOrganisationParams
) =>
  [
    `/user-bookings/organisations/${orgId}/bookings/stats/aggregated`,
    ...(params ? [params] : []),
  ] as const;

export type GetUserBookingAggregatedStatsByOrganisationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserBookingAggregatedStatsByOrganisation>>
>;
export type GetUserBookingAggregatedStatsByOrganisationQueryError = ErrorType<unknown>;

/**
 * @summary Get aggregated stats for current user in selected organisation
 */
export const useGetUserBookingAggregatedStatsByOrganisation = <TError = ErrorType<unknown>>(
  orgId: string,
  params: GetUserBookingAggregatedStatsByOrganisationParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getUserBookingAggregatedStatsByOrganisation>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!orgId;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetUserBookingAggregatedStatsByOrganisationKey(orgId, params) : null));
  const swrFn = () => getUserBookingAggregatedStatsByOrganisation(orgId, params, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Get current user's currently running booking
 */
export const getUserBookingCurrent = (options?: SecondParameter<typeof lasiusAxiosInstance>) => {
  return lasiusAxiosInstance<ModelsCurrentUserTimeBooking>(
    { url: `/user-bookings/current`, method: 'GET' },
    options
  );
};

export const getGetUserBookingCurrentKey = () => [`/user-bookings/current`] as const;

export type GetUserBookingCurrentQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserBookingCurrent>>
>;
export type GetUserBookingCurrentQueryError = ErrorType<unknown>;

/**
 * @summary Get current user's currently running booking
 */
export const useGetUserBookingCurrent = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getUserBookingCurrent>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  request?: SecondParameter<typeof lasiusAxiosInstance>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetUserBookingCurrentKey() : null));
  const swrFn = () => getUserBookingCurrent(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Get currently running bookings of members in selected organisation
 */
export const getUserBookingCurrentListByOrganisation = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsCurrentOrganisationTimeBookings>(
    { url: `/user-bookings/organisations/${orgId}/current`, method: 'GET' },
    options
  );
};

export const getGetUserBookingCurrentListByOrganisationKey = (orgId: string) =>
  [`/user-bookings/organisations/${orgId}/current`] as const;

export type GetUserBookingCurrentListByOrganisationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserBookingCurrentListByOrganisation>>
>;
export type GetUserBookingCurrentListByOrganisationQueryError = ErrorType<unknown>;

/**
 * @summary Get currently running bookings of members in selected organisation
 */
export const useGetUserBookingCurrentListByOrganisation = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getUserBookingCurrentListByOrganisation>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!orgId;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetUserBookingCurrentListByOrganisationKey(orgId) : null));
  const swrFn = () => getUserBookingCurrentListByOrganisation(orgId, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Get latest bookings of members in selected organisation
 */
export const getUserBookingLatestListByOrganisation = (
  orgId: string,
  params?: GetUserBookingLatestListByOrganisationParams,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<void>(
    { url: `/user-bookings/organisations/${orgId}/latest`, method: 'GET', params },
    options
  );
};

export const getGetUserBookingLatestListByOrganisationKey = (
  orgId: string,
  params?: GetUserBookingLatestListByOrganisationParams
) => [`/user-bookings/organisations/${orgId}/latest`, ...(params ? [params] : [])] as const;

export type GetUserBookingLatestListByOrganisationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserBookingLatestListByOrganisation>>
>;
export type GetUserBookingLatestListByOrganisationQueryError = ErrorType<unknown>;

/**
 * @summary Get latest bookings of members in selected organisation
 */
export const useGetUserBookingLatestListByOrganisation = <TError = ErrorType<unknown>>(
  orgId: string,
  params?: GetUserBookingLatestListByOrganisationParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getUserBookingLatestListByOrganisation>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!orgId;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetUserBookingLatestListByOrganisationKey(orgId, params) : null));
  const swrFn = () => getUserBookingLatestListByOrganisation(orgId, params, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
