/**
 * Lasius - Open source time tracker for teams
 * Copyright (c) Tegonal Genossenschaft (https://tegonal.com)
 *
 * This file is part of Lasius.
 *
 * Lasius is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * Lasius is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Lasius.
 * If not, see <https://www.gnu.org/licenses/>.
 *
 */

/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Lasius API
 * Track your time
 * OpenAPI spec version: 2.0.0+4-3a603fde+20250602-1535
 */
import useSwr from 'swr'
import useSWRMutation from 'swr/mutation'

import { lasiusAxiosInstance } from '../../lasiusAxiosInstance'

import type {
  ModelsCreateOrganisation,
  ModelsInvitationResult,
  ModelsOrganisation,
  ModelsUpdateOrganisation,
  ModelsUserStub,
  ModelsUserToOrganisationAssignment,
} from '..'
import type { BodyType, ErrorType } from '../../lasiusAxiosInstance'
import type { Arguments, Key, SWRConfiguration } from 'swr'
import type { SWRMutationConfiguration } from 'swr/mutation'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary create an organisation
 */
export const createOrganisation = (
  modelsCreateOrganisation: BodyType<ModelsCreateOrganisation>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsOrganisation>(
    {
      url: `/organisations`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsCreateOrganisation,
    },
    options,
  )
}

export const getCreateOrganisationMutationFetcher = (
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsCreateOrganisation }): Promise<ModelsOrganisation> => {
    return createOrganisation(arg, options)
  }
}
export const getCreateOrganisationMutationKey = () => [`/organisations`] as const

export type CreateOrganisationMutationResult = NonNullable<
  Awaited<ReturnType<typeof createOrganisation>>
>
export type CreateOrganisationMutationError = ErrorType<unknown>

/**
 * @summary create an organisation
 */
export const useCreateOrganisation = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof createOrganisation>>,
    TError,
    Key,
    ModelsCreateOrganisation,
    Awaited<ReturnType<typeof createOrganisation>>
  > & { swrKey?: string }
  request?: SecondParameter<typeof lasiusAxiosInstance>
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateOrganisationMutationKey()
  const swrFn = getCreateOrganisationMutationFetcher(requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
export const getOrganisation = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsOrganisation>(
    { url: `/organisations/${orgId}`, method: 'GET' },
    options,
  )
}

export const getGetOrganisationKey = (orgId: string) => [`/organisations/${orgId}`] as const

export type GetOrganisationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrganisation>>>
export type GetOrganisationQueryError = ErrorType<unknown>

export const useGetOrganisation = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getOrganisation>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!orgId
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetOrganisationKey(orgId) : null))
  const swrFn = () => getOrganisation(orgId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary update an organisation
 */
export const updateOrganisation = (
  orgId: string,
  modelsUpdateOrganisation: BodyType<ModelsUpdateOrganisation>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsOrganisation>(
    {
      url: `/organisations/${orgId}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsUpdateOrganisation,
    },
    options,
  )
}

export const getUpdateOrganisationMutationFetcher = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, { arg }: { arg: ModelsUpdateOrganisation }): Promise<ModelsOrganisation> => {
    return updateOrganisation(orgId, arg, options)
  }
}
export const getUpdateOrganisationMutationKey = (orgId: string) =>
  [`/organisations/${orgId}`] as const

export type UpdateOrganisationMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateOrganisation>>
>
export type UpdateOrganisationMutationError = ErrorType<unknown>

/**
 * @summary update an organisation
 */
export const useUpdateOrganisation = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof updateOrganisation>>,
      TError,
      Key,
      ModelsUpdateOrganisation,
      Awaited<ReturnType<typeof updateOrganisation>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdateOrganisationMutationKey(orgId)
  const swrFn = getUpdateOrganisationMutationFetcher(orgId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary delete/deactivate an organisation
 */
export const deactivateOrganisation = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<void>({ url: `/organisations/${orgId}`, method: 'DELETE' }, options)
}

export const getDeactivateOrganisationMutationFetcher = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return deactivateOrganisation(orgId, options)
  }
}
export const getDeactivateOrganisationMutationKey = (orgId: string) =>
  [`/organisations/${orgId}`] as const

export type DeactivateOrganisationMutationResult = NonNullable<
  Awaited<ReturnType<typeof deactivateOrganisation>>
>
export type DeactivateOrganisationMutationError = ErrorType<unknown>

/**
 * @summary delete/deactivate an organisation
 */
export const useDeactivateOrganisation = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof deactivateOrganisation>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof deactivateOrganisation>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeactivateOrganisationMutationKey(orgId)
  const swrFn = getDeactivateOrganisationMutationFetcher(orgId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
export const getOrganisationUserList = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsUserStub[]>(
    { url: `/organisations/${orgId}/users`, method: 'GET' },
    options,
  )
}

export const getGetOrganisationUserListKey = (orgId: string) =>
  [`/organisations/${orgId}/users`] as const

export type GetOrganisationUserListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrganisationUserList>>
>
export type GetOrganisationUserListQueryError = ErrorType<unknown>

export const useGetOrganisationUserList = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getOrganisationUserList>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!orgId
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetOrganisationUserListKey(orgId) : null))
  const swrFn = () => getOrganisationUserList(orgId, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary assign a user to an organisation
 */
export const inviteOrganisationUser = (
  orgId: string,
  modelsUserToOrganisationAssignment: BodyType<ModelsUserToOrganisationAssignment>,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<ModelsInvitationResult>(
    {
      url: `/organisations/${orgId}/invite`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsUserToOrganisationAssignment,
    },
    options,
  )
}

export const getInviteOrganisationUserMutationFetcher = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (
    _: Key,
    { arg }: { arg: ModelsUserToOrganisationAssignment },
  ): Promise<ModelsInvitationResult> => {
    return inviteOrganisationUser(orgId, arg, options)
  }
}
export const getInviteOrganisationUserMutationKey = (orgId: string) =>
  [`/organisations/${orgId}/invite`] as const

export type InviteOrganisationUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof inviteOrganisationUser>>
>
export type InviteOrganisationUserMutationError = ErrorType<unknown>

/**
 * @summary assign a user to an organisation
 */
export const useInviteOrganisationUser = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof inviteOrganisationUser>>,
      TError,
      Key,
      ModelsUserToOrganisationAssignment,
      Awaited<ReturnType<typeof inviteOrganisationUser>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getInviteOrganisationUserMutationKey(orgId)
  const swrFn = getInviteOrganisationUserMutationFetcher(orgId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
/**
 * @summary Remove selected user's membership from selected organisation
 */
export const removeOrganisationUser = (
  orgId: string,
  userId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return lasiusAxiosInstance<void>(
    { url: `/organisations/${orgId}/users/${userId}`, method: 'DELETE' },
    options,
  )
}

export const getRemoveOrganisationUserMutationFetcher = (
  orgId: string,
  userId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>,
) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return removeOrganisationUser(orgId, userId, options)
  }
}
export const getRemoveOrganisationUserMutationKey = (orgId: string, userId: string) =>
  [`/organisations/${orgId}/users/${userId}`] as const

export type RemoveOrganisationUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeOrganisationUser>>
>
export type RemoveOrganisationUserMutationError = ErrorType<unknown>

/**
 * @summary Remove selected user's membership from selected organisation
 */
export const useRemoveOrganisationUser = <TError = ErrorType<unknown>>(
  orgId: string,
  userId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof removeOrganisationUser>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof removeOrganisationUser>>
    > & { swrKey?: string }
    request?: SecondParameter<typeof lasiusAxiosInstance>
  },
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getRemoveOrganisationUserMutationKey(orgId, userId)
  const swrFn = getRemoveOrganisationUserMutationFetcher(orgId, userId, requestOptions)

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query,
  }
}
