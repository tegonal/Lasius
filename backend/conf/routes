# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

#######
####### General #######
#######

###
#  tags:
#    - general
#  summary: Get application config
#  operationId: getConfiguration
#  responses:
#     200:
#       description: success
#       content:
#         application/json:
#           schema:
#             $ref: '#/components/schemas/models.ApplicationConfig'
###
GET /config             controllers.ApplicationController.getConfig

###
#  tags:
#    - general
#  summary: Get csrf token
#  operationId: getCsrfToken
#  responses:
#     200:
#       description: success
#       content:
#         application/json:
#           schema:
#             $ref: '#/components/schemas/models.CsrfToken'
###
GET /csrf-token             controllers.ApplicationController.getCsrfToken

#######
####### Messaging #######
#######

###
#  tags:
#    - messaging
#  responses:
#    200:
#      description: success
###
-> /messaging    controllers.MessagingController

#######
####### Internal OAuth2 identity provider #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - oauth2-provider
#  summary: --------please annotate------
#  operationId: registerOAuthUser
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.OAuthUserRegistration'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.OAuthUserId'
###
POST /oauth2/user/register      controllers.OAuth2Controller.registerUser()

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - oauth2-provider
#  summary: Change current user's password
#  operationId: updateUserPassword
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.PasswordChangeRequest'
#  responses:
#    200:
#      description: success
###
POST /oauth2/user/update-password      controllers.OAuth2Controller.changePassword()

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - oauth2-provider
#  summary: access to internally provided oauth2 provider. Use for demo purposes only!
#  operationId: oauthAccessToken
#  responses:
#    200:
#      description: success
###
+nocsrf
POST    /oauth2/access_token    controllers.OAuth2Controller.accessToken

###
#  tags:
#    - oauth2-provider
#  summary: login to the oauth provider with the authorization code flow
#  operationId: login
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.OAuthAuthorizationCodeLoginRequest'
#  responses:
#    302:
#      description: redirect on success
###
+nocsrf
POST    /oauth2/login    controllers.OAuth2Controller.login()

###
#  tags:
#    - oauth2-provider
#  summary: logout from the internal oauth provider, token will not be valid anymore afterwards
#  operationId: logout
#  responses:
#    200:
#      description: ok, if access token was removed
###
+nocsrf
POST    /oauth2/logout    controllers.OAuth2Controller.logout()

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - oauth2-provider
#  summary: access to internally provided oauth2 provider. Use for demo purposes only!
#  operationId: getUOAuthUserProfile
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.OAuthUser'
###
GET    /oauth2/profile    controllers.OAuth2Controller.userProfile()

#######
####### Current User #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user
#  summary: Get current user's profile
#  operationId: getUserProfile
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.UserDTO'
###
GET /user/profile         controllers.UsersController.authUser()

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user
#  summary: Change current user's profile
#  operationId: updateUserProfile
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.PersonalDataUpdate'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.UserDTO'
###
POST /user/profile          controllers.UsersController.updatePersonalData()

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - user
#  summary: Change current user's settings
#  operationId: updateUserSettings
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.UserSettings'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.UserDTO'
###
POST /user/profile/settings          controllers.UsersController.updateUserSettings()

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - user
#  summary: Accept terms of service (TOS)
#  operationId: acceptUserTOS
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.AcceptTOSRequest'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.UserDTO'
###
POST /user/accept-tos      controllers.UsersController.acceptTOS()

#######
####### Users #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - users
#  summary: Change selected user's profile in selected organisation
#  operationId: updateUserProfileByOrganisation
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.PersonalDataUpdate'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.UserDTO'
###
POST /users/organisations/:orgId/users/:userId      controllers.UsersController.updateUserData(orgId: models.OrganisationId, userId: models.UserId)

#######
####### Organisations Current User #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user-organisations
#  summary: Change current user's working hours for the selected organisation
#  operationId: updateWorkingHoursByOrganisation
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.UpdateUserOrganisation'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.UserDTO'
###
POST /user-organisations/organisations/:orgId/working-hours     controllers.UsersController.updateMyUserOrganisationData(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - user-organisations
#  summary: Remove current user's membership from selected organisation
#  operationId: deleteUserMembershipByOrganisation
#  responses:
#    200:
#      description: successfully removed user from organisation
###
DELETE /user-organisations/organisations/:orgId/leave           controllers.OrganisationsController.unassignMyUser(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  summary: TagController
#  tags:
#     - user-organisations
#  summary: Get tags by organisation and project
#  operationId: getTagsByProject
#  responses:
#     200:
#       description: success
#       content:
#         application/json:
#           schema:
#             type: array
#             items:
#               $ref: '#/components/schemas/models.Tag'
###
GET /user-organisations/organisations/:orgId/projects/:projectId/tags          controllers.TagController.getTags(orgId: models.OrganisationId, projectId: models.ProjectId)


#######
####### Current User Bookings #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user-bookings
#  summary: Start booking time on selected organisation for the current user
#  operationId: startUserBookingCurrent
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.StartBookingRequest'
#  responses:
#    200:
#      description: success
###
POST /user-bookings/organisations/:orgId/bookings/start         controllers.TimeBookingController.start(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user-bookings
#  summary: Stop the currently running booking by organisation and booking id for the current user
#  operationId: stopUserBookingCurrent
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.StopBookingRequest'
#  responses:
#    200:
#      description: success
###
POST /user-bookings/organisations/:orgId/bookings/:bookingId/stop       controllers.TimeBookingController.stop(orgId: models.OrganisationId, bookingId: models.BookingId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user-bookings
#  summary: Change the currently running booking by organisation and booking id for the current user
#  operationId: updateUserBookingCurrent
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.BookingChangeStartRequest'
#  responses:
#    200:
#      description: success
###
POST /user-bookings/organisations/:orgId/bookings/:bookingId/start-time     controllers.TimeBookingController.changeStart(orgId: models.OrganisationId, bookingId:models.BookingId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user-bookings
#  summary: Remove a booking by organisation and booking id for the current user
#  operationId: deleteUserBooking
#  responses:
#    200:
#      description: success
###
DELETE /user-bookings/organisations/:orgId/bookings/:bookingId          controllers.TimeBookingController.remove(orgId: models.OrganisationId, bookingId:models.BookingId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user-bookings
#  summary: Create a booking by organisation for the current user
#  operationId: addUserBookingByOrganisation
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.AddBookingRequest'
#  responses:
#    200:
#      description: success
###
POST /user-bookings/organisations/:orgId/bookings           controllers.TimeBookingController.add(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user-bookings
#  summary: Change a booking by organisation for the current user
#  operationId: updateUserBooking
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.EditBookingRequest'
#  responses:
#    200:
#      description: success
###
POST /user-bookings/organisations/:orgId/bookings/:bookingId            controllers.TimeBookingController.edit(orgId: models.OrganisationId,bookingId: models.BookingId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user-bookings
#  summary: Get current user's booking history for selected organisation
#  operationId: getUserBookingListByOrganisation
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.BookingV2'
###
GET /user-bookings/organisations/:orgId/bookings/history            controllers.TimeBookingHistoryController.getTimeBookingHistoryByUser(orgId: models.OrganisationId,from:org.joda.time.LocalDateTime, to:org.joda.time.LocalDateTime, limit: Option[Int], skip: Option[Int])

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - user-bookings
#  summary: Get aggregated stats for current user in selected organisation
#  operationId: getUserBookingAggregatedStatsByOrganisation
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.BookingStats'
###
GET /user-bookings/organisations/:orgId/bookings/stats/aggregated                         controllers.TimeBookingStatisticsController.getAggregatedStatisticsByUser(orgId: models.OrganisationId,source: String, from:org.joda.time.LocalDate, to:org.joda.time.LocalDate, granularity: models.Granularity)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#     - user-bookings
#  summary: Get current user's currently running booking
#  operationId: getUserBookingCurrent
#  responses:
#     200:
#       description: success
#       content:
#         application/json:
#           schema:
#             $ref: '#/components/schemas/models.CurrentUserTimeBooking'
###
GET /user-bookings/current                                  controllers.CurrentUserTimeBookingsController.getCurrentTimeBooking()

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - user-bookings
#  summary: Get currently running bookings of members in selected organisation
#  operationId: getUserBookingCurrentListByOrganisation
#  responses:
#     200:
#       description: success
#       content:
#         application/json:
#           schema:
#             $ref: '#/components/schemas/models.CurrentOrganisationTimeBookings'
###
GET /user-bookings/organisations/:orgId/current           			            controllers.OrganisationTimeBookingsController.getOrganisationTimeBooking(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#     - user-bookings
#  summary: Get latest bookings of members in selected organisation
#  operationId: getUserBookingLatestListByOrganisation
#  responses:
#     200:
#       description: success
###
GET /user-bookings/organisations/:orgId/latest						controllers.LatestUserTimeBookingsController.getLatestTimeBooking(orgId: models.OrganisationId,maxHistory:Int?=5)


#######
####### Current User Favorites #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - user-favorites
#  summary: Get current user's favorite bookings list for the selected organisation
#  operationId: getFavoriteBookingList
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.UserFavorites'
###
GET /user-favorites/organisations/:orgId	                controllers.UserFavoritesController.getFavorites(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - user-favorites
#  summary: Save a new favorite booking for the current user in the selected organisation
#  operationId: addFavoriteBooking
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.FavoritesRequest'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.UserFavorites'
###
POST /user-favorites/organisations/:orgId                    controllers.UserFavoritesController.addFavorite(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - user-favorites
#  summary: Remove a favorite booking for the current user from the selected organisation
#  operationId: deleteFavoriteBooking
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.FavoritesRequest'
#  responses:
#    200:
#      description: success
###
DELETE /user-favorites/organisations/:orgId                    controllers.UserFavoritesController.removeFavorite(orgId: models.OrganisationId)

#######
####### Organisation Bookings #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - organisation-bookings
#  summary: Get bookings for the selected organisation within the selected timeframe
#  operationId: getOrganisationBookingList
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.BookingV2'
###
GET /organisation-bookings/organisations/:orgId/bookings/history                                           controllers.TimeBookingHistoryController.getTimeBookingHistoryByOrganisation(orgId: models.OrganisationId, from:org.joda.time.LocalDateTime, to:org.joda.time.LocalDateTime, limit: Option[Int], skip: Option[Int])

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - organisation-bookings
#  summary: Get aggregated statistics about bookings for the selected organisation within the selected timeframe
#  operationId: getOrganisationBookingAggregatedStats
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.BookingStats'
###
GET /organisation-bookings/organisations/:orgId/bookings/stats/aggregated                                  controllers.TimeBookingStatisticsController.getAggregatedStatisticsByOrganisation(orgId: models.OrganisationId,source: String, from:org.joda.time.LocalDate, to:org.joda.time.LocalDate, granularity: models.Granularity)

#######
####### Project Bookings #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - project-bookings
#  summary: Get statistics about bookings for the selected project within the selected timeframe
#  operationId: getProjectBookingList
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.BookingV2'
###
GET /organisations/:orgId/projects/:projectId/bookings/history                       controllers.TimeBookingHistoryController.getTimeBookingHistoryByProject(orgId: models.OrganisationId, projectId: models.ProjectId, from:org.joda.time.LocalDateTime, to:org.joda.time.LocalDateTime, limit: Option[Int], skip: Option[Int])

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - project-bookings
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.BookingStats'
###
GET /organisations/:orgId/projects/:projectId/bookings/stats/aggregated             controllers.TimeBookingStatisticsController.getAggregatedStatisticsByProject(orgId: models.OrganisationId, projectId: models.ProjectId,source: String, from:org.joda.time.LocalDate, to:org.joda.time.LocalDate, granularity: models.Granularity)

#######
####### Projects #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - projects
#  operationId: getProjectList
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.Project'
###
GET /organisations/:orgId/projects                                      controllers.ProjectsController.getProjects(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - projects
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.CreateProject'
#  responses:
#    201:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.Project'
###
POST /organisations/:orgId/projects                                      controllers.ProjectsController.createProject(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  summary: update a project
#  tags:
#    - projects
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.UpdateProject'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.Project'
###
POST /organisations/:orgId/projects/:projectId                                               controllers.ProjectsController.updateProject(orgId: models.OrganisationId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  summary: Deactivate a project
#  tags:
#    - projects
#  responses:
#    200:
#      description: success
###
DELETE /organisations/:orgId/projects/:projectId                           controllers.ProjectsController.deactivateProject(orgId: models.OrganisationId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - projects
#  operationId: getProjectUserList
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.UserStub'
###
GET /organisations/:orgId/projects/:projectId/users                     controllers.ProjectsController.getUsers(orgId: models.OrganisationId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - projects
#  operationId: getProjectLastActivityDate
#  description: Get last activity date for a project.
#  responses:
#    200:
#      description: Last activity date
#      content:
#        application/json:
#          schema:
#            type: string
#            format: date-time
#    204:
#      description: No activity found for this project
###
GET /organisations/:orgId/projects/:projectId/last-activity            controllers.ProjectsController.getLastActivityDate(orgId: models.OrganisationId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - projects
#  operationId: inviteProjectUser
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.UserToProjectAssignment'
#  responses:
#    201:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.InvitationResult'
###
POST /organisations/:orgId/projects/:projectId/users                     controllers.ProjectsController.inviteUser(orgId: models.OrganisationId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - projects
#  operationId: removeProjectUser
#  responses:
#    200:
#      description: success
###
DELETE /organisations/:orgId/projects/:projectId/users/:userId             controllers.ProjectsController.unassignUser(orgId: models.OrganisationId, projectId: models.ProjectId, userId: models.UserId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - projects
#  summary: Remove current user's membership from selected project and selected organisation
#  operationId: removeProjectOwnUser
#  responses:
#    200:
#      description: success
###
DELETE /organisations/:orgId/projects/:projectId/leave             controllers.ProjectsController.unassignMyUser(orgId: models.OrganisationId, projectId: models.ProjectId)


#######
####### Organisations #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  summary: create an organisation
#  tags: 
#    - organisations
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.CreateOrganisation'
#  responses:
#    201:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.Organisation'
###
POST /organisations                                               controllers.OrganisationsController.createOrganisation()

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - organisations
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.Organisation'
###
GET /organisations/:orgId                                 controllers.OrganisationsController.getOrganisation(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  summary: update an organisation
#  tags:
#    - organisations
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.UpdateOrganisation'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.Organisation'
###
POST /organisations/:orgId                                               controllers.OrganisationsController.updateOrganisation(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  summary: delete/deactivate an organisation
#  tags: 
#    - organisations
#  responses:
#    200:
#      description: success
###
DELETE /organisations/:orgId                                        controllers.OrganisationsController.deactivateOrganisation(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - organisations
#  operationId: getOrganisationUserList
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.UserStub'
###
GET /organisations/:orgId/users                                  controllers.OrganisationsController.getUsers(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  summary: assign a user to an organisation
#  tags: 
#    - organisations
#  operationId: inviteOrganisationUser
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.UserToOrganisationAssignment'
#  responses:
#    201:
#      description: successfully created invitation
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.InvitationResult'
###
POST /organisations/:orgId/invite                                  controllers.OrganisationsController.inviteUser(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - organisations
#  summary: Remove selected user's membership from selected organisation
#  operationId: removeOrganisationUser
#  responses:
#    200:
#      description: successfully removed user from organisation
###
DELETE /organisations/:orgId/users/:userId                           controllers.OrganisationsController.unassignUser(orgId: models.OrganisationId, userId: models.UserId)


#######
####### Invitations Private #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  summary: get detail of an invitation
#  operationId: getInvitation
#  tags: 
#    - invitations-private
#  responses:
#    400:
#      description: invalid invitation or invalid referenced user
#    200:
#      description: success if valid invitation
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.Invitation'
###
GET /invitations/:invitationId                          controllers.InvitationsController.getDetails(invitationId: models.InvitationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - invitations-private
#  operationId: acceptInvitation
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.AcceptInvitationRequest'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.Invitation'
###
POST /invitations/:invitationId/accept                  controllers.InvitationsController.accept(invitationId: models.InvitationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - invitations-private
#  operationId: declineInvitation
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.Invitation'
###
POST /invitations/:invitationId/decline                 controllers.InvitationsController.decline(invitationId: models.InvitationId)

#######
####### Invitations Public #######
#######

###
#  tags:
#    - invitations-public
#  summary: get status of an invitation
#  operationId: getInvitationStatus
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.InvitationStatusResponse'
#    400:
#      description: invalid or non existing invitation
###
GET /invitations/:invitationId/status               controllers.InvitationsController.getStatus(invitationId: models.InvitationId)

#######
####### Issue Importer Configurations #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Get all GitLab importer configurations for organisation
#  operationId: getGitlabConfigs
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.GitlabConfigResponse'
###
GET /organisations/:orgId/issue-importers/gitlab                                                controllers.IssueImporterConfigController.getGitlabConfigs(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Get GitLab importer configuration by ID
#  operationId: getGitlabConfig
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.GitlabConfigResponse'
#    404:
#      description: configuration not found
###
GET /organisations/:orgId/issue-importers/gitlab/:id                                            controllers.IssueImporterConfigController.getGitlabConfig(orgId: models.OrganisationId, id: models.GitlabConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Get GitLab importer configuration for a specific project
#  operationId: getGitlabConfigForProject
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.GitlabConfigResponse'
#    404:
#      description: no configuration found for this project
###
GET /organisations/:orgId/issue-importers/gitlab/for-project/:projectId                         controllers.IssueImporterConfigController.getGitlabConfigForProject(orgId: models.OrganisationId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Create new GitLab importer configuration (Organisation Admin only)
#  operationId: createGitlabConfig
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.CreateGitlabConfig'
#  responses:
#    201:
#      description: configuration created
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.GitlabConfigResponse'
###
POST /organisations/:orgId/issue-importers/gitlab                                               controllers.IssueImporterConfigController.createGitlabConfig(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Update GitLab importer configuration (Organisation Admin only)
#  operationId: updateGitlabConfig
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.UpdateGitlabConfig'
#  responses:
#    200:
#      description: configuration updated
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.GitlabConfigResponse'
###
POST /organisations/:orgId/issue-importers/gitlab/:id                                           controllers.IssueImporterConfigController.updateGitlabConfig(orgId: models.OrganisationId, id: models.GitlabConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Delete GitLab importer configuration (Organisation Admin only)
#  operationId: deleteGitlabConfig
#  responses:
#    200:
#      description: configuration deleted
###
DELETE /organisations/:orgId/issue-importers/gitlab/:id                                         controllers.IssueImporterConfigController.deleteGitlabConfig(orgId: models.OrganisationId, id: models.GitlabConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Add project mapping to GitLab configuration (Organisation Admin only)
#  operationId: addGitlabProjectMapping
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.GitlabProjectMapping'
#  responses:
#    200:
#      description: project mapping added
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.GitlabConfigResponse'
###
POST /organisations/:orgId/issue-importers/gitlab/:id/projects                                  controllers.IssueImporterConfigController.addGitlabProjectMapping(orgId: models.OrganisationId, id: models.GitlabConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Remove project mapping from GitLab configuration (Organisation Admin only)
#  operationId: removeGitlabProjectMapping
#  responses:
#    200:
#      description: project mapping removed
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.GitlabConfigResponse'
###
DELETE /organisations/:orgId/issue-importers/gitlab/:id/projects/:projectId                     controllers.IssueImporterConfigController.removeGitlabProjectMapping(orgId: models.OrganisationId, id: models.GitlabConfigId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Update project mapping settings in GitLab configuration (Organisation Admin only)
#  operationId: updateGitlabProjectMapping
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.GitlabProjectSettings'
#  responses:
#    200:
#      description: project mapping updated
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.GitlabConfigResponse'
###
POST /organisations/:orgId/issue-importers/gitlab/:id/projects/:projectId                       controllers.IssueImporterConfigController.updateGitlabProjectMapping(orgId: models.OrganisationId, id: models.GitlabConfigId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Get all Jira importer configurations for organisation
#  operationId: getJiraConfigs
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.JiraConfigResponse'
###
GET /organisations/:orgId/issue-importers/jira                                                  controllers.IssueImporterConfigController.getJiraConfigs(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Get Jira importer configuration by ID
#  operationId: getJiraConfig
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.JiraConfigResponse'
#    404:
#      description: configuration not found
###
GET /organisations/:orgId/issue-importers/jira/:id                                              controllers.IssueImporterConfigController.getJiraConfig(orgId: models.OrganisationId, id: models.JiraConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Get Jira importer configuration for a specific project
#  operationId: getJiraConfigForProject
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.JiraConfigResponse'
#    404:
#      description: no configuration found for this project
###
GET /organisations/:orgId/issue-importers/jira/for-project/:projectId                           controllers.IssueImporterConfigController.getJiraConfigForProject(orgId: models.OrganisationId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Create new Jira importer configuration (Organisation Admin only)
#  operationId: createJiraConfig
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.CreateJiraConfig'
#  responses:
#    201:
#      description: configuration created
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.JiraConfigResponse'
###
POST /organisations/:orgId/issue-importers/jira                                               controllers.IssueImporterConfigController.createJiraConfig(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Update Jira importer configuration (Organisation Admin only)
#  operationId: updateJiraConfig
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.UpdateJiraConfig'
#  responses:
#    200:
#      description: configuration updated
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.JiraConfigResponse'
###
POST /organisations/:orgId/issue-importers/jira/:id                                           controllers.IssueImporterConfigController.updateJiraConfig(orgId: models.OrganisationId, id: models.JiraConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Delete Jira importer configuration (Organisation Admin only)
#  operationId: deleteJiraConfig
#  responses:
#    200:
#      description: configuration deleted
###
DELETE /organisations/:orgId/issue-importers/jira/:id                                         controllers.IssueImporterConfigController.deleteJiraConfig(orgId: models.OrganisationId, id: models.JiraConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Add project mapping to Jira configuration (Organisation Admin only)
#  operationId: addJiraProjectMapping
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.JiraProjectMapping'
#  responses:
#    200:
#      description: project mapping added
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.JiraConfigResponse'
###
POST /organisations/:orgId/issue-importers/jira/:id/projects                                  controllers.IssueImporterConfigController.addJiraProjectMapping(orgId: models.OrganisationId, id: models.JiraConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Remove project mapping from Jira configuration (Organisation Admin only)
#  operationId: removeJiraProjectMapping
#  responses:
#    200:
#      description: project mapping removed
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.JiraConfigResponse'
###
DELETE /organisations/:orgId/issue-importers/jira/:id/projects/:projectId                     controllers.IssueImporterConfigController.removeJiraProjectMapping(orgId: models.OrganisationId, id: models.JiraConfigId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Update project mapping settings in Jira configuration (Organisation Admin only)
#  operationId: updateJiraProjectMapping
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.JiraProjectSettings'
#  responses:
#    200:
#      description: project mapping updated
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.JiraConfigResponse'
###
POST /organisations/:orgId/issue-importers/jira/:id/projects/:projectId                       controllers.IssueImporterConfigController.updateJiraProjectMapping(orgId: models.OrganisationId, id: models.JiraConfigId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Get all Plane importer configurations for organisation
#  operationId: getPlaneConfigs
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.PlaneConfigResponse'
###
GET /organisations/:orgId/issue-importers/plane                                                 controllers.IssueImporterConfigController.getPlaneConfigs(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Get Plane importer configuration by ID
#  operationId: getPlaneConfig
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.PlaneConfigResponse'
#    404:
#      description: configuration not found
###
GET /organisations/:orgId/issue-importers/plane/:id                                             controllers.IssueImporterConfigController.getPlaneConfig(orgId: models.OrganisationId, id: models.PlaneConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Get Plane importer configuration for a specific project
#  operationId: getPlaneConfigForProject
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.PlaneConfigResponse'
#    404:
#      description: no configuration found for this project
###
GET /organisations/:orgId/issue-importers/plane/for-project/:projectId                          controllers.IssueImporterConfigController.getPlaneConfigForProject(orgId: models.OrganisationId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Create new Plane importer configuration (Organisation Admin only)
#  operationId: createPlaneConfig
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.CreatePlaneConfig'
#  responses:
#    201:
#      description: configuration created
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.PlaneConfigResponse'
###
POST /organisations/:orgId/issue-importers/plane                                               controllers.IssueImporterConfigController.createPlaneConfig(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Update Plane importer configuration (Organisation Admin only)
#  operationId: updatePlaneConfig
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.UpdatePlaneConfig'
#  responses:
#    200:
#      description: configuration updated
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.PlaneConfigResponse'
###
POST /organisations/:orgId/issue-importers/plane/:id                                           controllers.IssueImporterConfigController.updatePlaneConfig(orgId: models.OrganisationId, id: models.PlaneConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Delete Plane importer configuration (Organisation Admin only)
#  operationId: deletePlaneConfig
#  responses:
#    200:
#      description: configuration deleted
###
DELETE /organisations/:orgId/issue-importers/plane/:id                                         controllers.IssueImporterConfigController.deletePlaneConfig(orgId: models.OrganisationId, id: models.PlaneConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Add project mapping to Plane configuration (Organisation Admin only)
#  operationId: addPlaneProjectMapping
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.PlaneProjectMapping'
#  responses:
#    200:
#      description: project mapping added
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.PlaneConfigResponse'
###
POST /organisations/:orgId/issue-importers/plane/:id/projects                                  controllers.IssueImporterConfigController.addPlaneProjectMapping(orgId: models.OrganisationId, id: models.PlaneConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Remove project mapping from Plane configuration (Organisation Admin only)
#  operationId: removePlaneProjectMapping
#  responses:
#    200:
#      description: project mapping removed
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.PlaneConfigResponse'
###
DELETE /organisations/:orgId/issue-importers/plane/:id/projects/:projectId                     controllers.IssueImporterConfigController.removePlaneProjectMapping(orgId: models.OrganisationId, id: models.PlaneConfigId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Update project mapping settings in Plane configuration (Organisation Admin only)
#  operationId: updatePlaneProjectMapping
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.PlaneProjectSettings'
#  responses:
#    200:
#      description: project mapping updated
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.PlaneConfigResponse'
###
POST /organisations/:orgId/issue-importers/plane/:id/projects/:projectId                       controllers.IssueImporterConfigController.updatePlaneProjectMapping(orgId: models.OrganisationId, id: models.PlaneConfigId, projectId: models.ProjectId)

#######
####### Static Files #######
#######

# ~~~~
# Map static resources from the /public folder to the /assets URL path

### NoDocs ###
GET /assets/*file                          controllers.Assets.versioned(path="/public", file: Asset)

#######
####### OpenAPI | Swagger #######
#######

### NoDocs ###
GET /docs/swagger-ui/*file        controllers.Assets.at(path:String="/public/lib/swagger-ui", file:String)

