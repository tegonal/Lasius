# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

#######
####### General #######
#######

###
#  tags:
#    - general
#  summary: Get application config
#  operationId: getConfiguration
#  responses:
#     200:
#       description: success
#       content:
#         application/json:
#           schema:
#             $ref: '#/components/schemas/models.ApplicationConfig'
###
GET /config             controllers.ApplicationController.getConfig

###
#  tags:
#    - general
#  summary: Get csrf token
#  operationId: getCsrfToken
#  responses:
#     200:
#       description: success
#       content:
#         application/json:
#           schema:
#             $ref: '#/components/schemas/models.CsrfToken'
###
GET /csrf-token             controllers.ApplicationController.getCsrfToken

#######
####### Messaging #######
#######

###
#  tags:
#    - messaging
#  responses:
#    200:
#      description: success
###
-> /messaging    controllers.MessagingController

#######
####### Internal OAuth2 identity provider #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - oauth2-provider
#  summary: --------please annotate------
#  operationId: registerOAuthUser
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.OAuthUserRegistration'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.OAuthUserId'
###
POST /oauth2/user/register      controllers.OAuth2Controller.registerUser()

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - oauth2-provider
#  summary: Change current user's password
#  operationId: updateUserPassword
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.PasswordChangeRequest'
#  responses:
#    200:
#      description: success
###
POST /oauth2/user/update-password      controllers.OAuth2Controller.changePassword()

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - oauth2-provider
#  summary: access to internally provided oauth2 provider. Use for demo purposes only!
#  operationId: oauthAccessToken
#  responses:
#    200:
#      description: success
###
+nocsrf
POST    /oauth2/access_token    controllers.OAuth2Controller.accessToken

###
#  tags:
#    - oauth2-provider
#  summary: login to the oauth provider with the authorization code flow
#  operationId: login
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.OAuthAuthorizationCodeLoginRequest'
#  responses:
#    302:
#      description: redirect on success
###
+nocsrf
POST    /oauth2/login    controllers.OAuth2Controller.login()

###
#  tags:
#    - oauth2-provider
#  summary: logout from the internal oauth provider, token will not be valid anymore afterwards
#  operationId: logout
#  responses:
#    200:
#      description: ok, if access token was removed
###
+nocsrf
POST    /oauth2/logout    controllers.OAuth2Controller.logout()

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - oauth2-provider
#  summary: access to internally provided oauth2 provider. Use for demo purposes only!
#  operationId: getUOAuthUserProfile
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.OAuthUser'
###
GET    /oauth2/profile    controllers.OAuth2Controller.userProfile()

#######
####### Current User #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user
#  summary: Get current user's profile
#  operationId: getUserProfile
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.UserDTO'
###
GET /user/profile         controllers.UsersController.authUser()

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user
#  summary: Change current user's profile
#  operationId: updateUserProfile
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.PersonalDataUpdate'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.UserDTO'
###
POST /user/profile          controllers.UsersController.updatePersonalData()

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - user
#  summary: Change current user's settings
#  operationId: updateUserSettings
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.UserSettings'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.UserDTO'
###
POST /user/profile/settings          controllers.UsersController.updateUserSettings()

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - user
#  summary: Accept terms of service (TOS)
#  operationId: acceptUserTOS
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.AcceptTOSRequest'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.UserDTO'
###
POST /user/accept-tos      controllers.UsersController.acceptTOS()

#######
####### Users #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - users
#  summary: Change selected user's profile in selected organisation
#  operationId: updateUserProfileByOrganisation
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.PersonalDataUpdate'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.UserDTO'
###
POST /users/organisations/:orgId/users/:userId      controllers.UsersController.updateUserData(orgId: models.OrganisationId, userId: models.UserId)

#######
####### Organisations Current User #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user-organisations
#  summary: Change current user's working hours for the selected organisation
#  operationId: updateWorkingHoursByOrganisation
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.UpdateUserOrganisation'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.UserDTO'
###
POST /user-organisations/organisations/:orgId/working-hours     controllers.UsersController.updateMyUserOrganisationData(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - user-organisations
#  summary: Remove current user's membership from selected organisation
#  operationId: deleteUserMembershipByOrganisation
#  responses:
#    200:
#      description: successfully removed user from organisation
###
DELETE /user-organisations/organisations/:orgId/leave           controllers.OrganisationsController.unassignMyUser(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#     - user-organisations
#  summary: Get tags by organisation and project
#  operationId: getTagsByProject
#  responses:
#     200:
#       description: success
#       content:
#         application/json:
#           schema:
#             type: array
#             items:
#               $ref: '#/components/schemas/models.Tag'
###
GET /user-organisations/organisations/:orgId/projects/:projectId/tags          controllers.TagController.getTags(orgId: models.OrganisationId, projectId: models.ProjectId)


#######
####### Current User Bookings #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user-bookings
#  summary: Start booking time on selected organisation for the current user
#  operationId: startUserBookingCurrent
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.StartBookingRequest'
#  responses:
#    200:
#      description: success
###
POST /user-bookings/organisations/:orgId/bookings/start         controllers.TimeBookingController.start(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user-bookings
#  summary: Stop the currently running booking by organisation and booking id for the current user
#  operationId: stopUserBookingCurrent
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.StopBookingRequest'
#  responses:
#    200:
#      description: success
###
POST /user-bookings/organisations/:orgId/bookings/:bookingId/stop       controllers.TimeBookingController.stop(orgId: models.OrganisationId, bookingId: models.BookingId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user-bookings
#  summary: Change the currently running booking by organisation and booking id for the current user
#  operationId: updateUserBookingCurrent
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.BookingChangeStartRequest'
#  responses:
#    200:
#      description: success
###
POST /user-bookings/organisations/:orgId/bookings/:bookingId/start-time     controllers.TimeBookingController.changeStart(orgId: models.OrganisationId, bookingId:models.BookingId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user-bookings
#  summary: Remove a booking by organisation and booking id for the current user
#  operationId: deleteUserBooking
#  responses:
#    200:
#      description: success
###
DELETE /user-bookings/organisations/:orgId/bookings/:bookingId          controllers.TimeBookingController.remove(orgId: models.OrganisationId, bookingId:models.BookingId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user-bookings
#  summary: Create a booking by organisation for the current user
#  operationId: addUserBookingByOrganisation
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.AddBookingRequest'
#  responses:
#    200:
#      description: success
###
POST /user-bookings/organisations/:orgId/bookings           controllers.TimeBookingController.add(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user-bookings
#  summary: Change a booking by organisation for the current user
#  operationId: updateUserBooking
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.EditBookingRequest'
#  responses:
#    200:
#      description: success
###
POST /user-bookings/organisations/:orgId/bookings/:bookingId            controllers.TimeBookingController.edit(orgId: models.OrganisationId,bookingId: models.BookingId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - user-bookings
#  summary: Get current user's booking history for selected organisation
#  operationId: getUserBookingListByOrganisation
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.BookingV2'
###
GET /user-bookings/organisations/:orgId/bookings/history            controllers.TimeBookingHistoryController.getTimeBookingHistoryByUser(orgId: models.OrganisationId,from:org.joda.time.LocalDateTime, to:org.joda.time.LocalDateTime, limit: Option[Int], skip: Option[Int])

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - user-bookings
#  summary: Get aggregated stats for current user in selected organisation
#  operationId: getUserBookingAggregatedStatsByOrganisation
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.BookingStats'
###
GET /user-bookings/organisations/:orgId/bookings/stats/aggregated                         controllers.TimeBookingStatisticsController.getAggregatedStatisticsByUser(orgId: models.OrganisationId,source: String, from:org.joda.time.LocalDate, to:org.joda.time.LocalDate, granularity: models.Granularity)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#     - user-bookings
#  summary: Get current user's currently running booking
#  operationId: getUserBookingCurrent
#  responses:
#     200:
#       description: success
#       content:
#         application/json:
#           schema:
#             $ref: '#/components/schemas/models.CurrentUserTimeBooking'
###
GET /user-bookings/current                                  controllers.CurrentUserTimeBookingsController.getCurrentTimeBooking()

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - user-bookings
#  summary: Get currently running bookings of members in selected organisation
#  operationId: getUserBookingCurrentListByOrganisation
#  responses:
#     200:
#       description: success
#       content:
#         application/json:
#           schema:
#             $ref: '#/components/schemas/models.CurrentOrganisationTimeBookings'
###
GET /user-bookings/organisations/:orgId/current           			            controllers.OrganisationTimeBookingsController.getOrganisationTimeBooking(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#     - user-bookings
#  summary: Get latest bookings of members in selected organisation
#  operationId: getUserBookingLatestListByOrganisation
#  responses:
#     200:
#       description: success
###
GET /user-bookings/organisations/:orgId/latest						controllers.LatestUserTimeBookingsController.getLatestTimeBooking(orgId: models.OrganisationId,maxHistory:Int?=5)


#######
####### Current User Favorites #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - user-favorites
#  summary: Get current user's favorite bookings list for the selected organisation
#  operationId: getFavoriteBookingList
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.UserFavorites'
###
GET /user-favorites/organisations/:orgId	                controllers.UserFavoritesController.getFavorites(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - user-favorites
#  summary: Save a new favorite booking for the current user in the selected organisation
#  operationId: addFavoriteBooking
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.FavoritesRequest'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.UserFavorites'
###
POST /user-favorites/organisations/:orgId                    controllers.UserFavoritesController.addFavorite(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - user-favorites
#  summary: Remove a favorite booking for the current user from the selected organisation
#  operationId: deleteFavoriteBooking
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.FavoritesRequest'
#  responses:
#    200:
#      description: success
###
DELETE /user-favorites/organisations/:orgId                    controllers.UserFavoritesController.removeFavorite(orgId: models.OrganisationId)

#######
####### Organisation Bookings #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - organisation-bookings
#  summary: Get bookings for the selected organisation within the selected timeframe
#  operationId: getOrganisationBookingList
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.BookingV2'
###
GET /organisation-bookings/organisations/:orgId/bookings/history                                           controllers.TimeBookingHistoryController.getTimeBookingHistoryByOrganisation(orgId: models.OrganisationId, from:org.joda.time.LocalDateTime, to:org.joda.time.LocalDateTime, limit: Option[Int], skip: Option[Int])

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - organisation-bookings
#  summary: Get aggregated statistics about bookings for the selected organisation within the selected timeframe
#  operationId: getOrganisationBookingAggregatedStats
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.BookingStats'
###
GET /organisation-bookings/organisations/:orgId/bookings/stats/aggregated                                  controllers.TimeBookingStatisticsController.getAggregatedStatisticsByOrganisation(orgId: models.OrganisationId,source: String, from:org.joda.time.LocalDate, to:org.joda.time.LocalDate, granularity: models.Granularity)

#######
####### Project Bookings #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - project-bookings
#  summary: Get statistics about bookings for the selected project within the selected timeframe
#  operationId: getProjectBookingList
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.BookingV2'
###
GET /organisations/:orgId/projects/:projectId/bookings/history                       controllers.TimeBookingHistoryController.getTimeBookingHistoryByProject(orgId: models.OrganisationId, projectId: models.ProjectId, from:org.joda.time.LocalDateTime, to:org.joda.time.LocalDateTime, limit: Option[Int], skip: Option[Int])

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - project-bookings
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.BookingStats'
###
GET /organisations/:orgId/projects/:projectId/bookings/stats/aggregated             controllers.TimeBookingStatisticsController.getAggregatedStatisticsByProject(orgId: models.OrganisationId, projectId: models.ProjectId,source: String, from:org.joda.time.LocalDate, to:org.joda.time.LocalDate, granularity: models.Granularity)

#######
####### Projects #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - projects
#  operationId: getProjectList
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.Project'
###
GET /organisations/:orgId/projects                                      controllers.ProjectsController.getProjects(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - projects
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.CreateProject'
#  responses:
#    201:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.Project'
###
POST /organisations/:orgId/projects                                      controllers.ProjectsController.createProject(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  summary: update a project
#  tags:
#    - projects
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.UpdateProject'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.Project'
###
POST /organisations/:orgId/projects/:projectId                                               controllers.ProjectsController.updateProject(orgId: models.OrganisationId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  summary: Deactivate a project
#  tags:
#    - projects
#  responses:
#    200:
#      description: success
###
DELETE /organisations/:orgId/projects/:projectId                           controllers.ProjectsController.deactivateProject(orgId: models.OrganisationId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - projects
#  operationId: getProjectUserList
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.UserStub'
###
GET /organisations/:orgId/projects/:projectId/users                     controllers.ProjectsController.getUsers(orgId: models.OrganisationId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - projects
#  operationId: getProjectLastActivityDate
#  description: Get last activity date for a project.
#  responses:
#    200:
#      description: Last activity date
#      content:
#        application/json:
#          schema:
#            type: string
#            format: date-time
#    204:
#      description: No activity found for this project
###
GET /organisations/:orgId/projects/:projectId/last-activity            controllers.ProjectsController.getLastActivityDate(orgId: models.OrganisationId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - projects
#  operationId: inviteProjectUser
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.UserToProjectAssignment'
#  responses:
#    201:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.InvitationResult'
###
POST /organisations/:orgId/projects/:projectId/users                     controllers.ProjectsController.inviteUser(orgId: models.OrganisationId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - projects
#  operationId: removeProjectUser
#  responses:
#    200:
#      description: success
###
DELETE /organisations/:orgId/projects/:projectId/users/:userId             controllers.ProjectsController.unassignUser(orgId: models.OrganisationId, projectId: models.ProjectId, userId: models.UserId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - projects
#  summary: Remove current user's membership from selected project and selected organisation
#  operationId: removeProjectOwnUser
#  responses:
#    200:
#      description: success
###
DELETE /organisations/:orgId/projects/:projectId/leave             controllers.ProjectsController.unassignMyUser(orgId: models.OrganisationId, projectId: models.ProjectId)


#######
####### Organisations #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  summary: create an organisation
#  tags: 
#    - organisations
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.CreateOrganisation'
#  responses:
#    201:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.Organisation'
###
POST /organisations                                               controllers.OrganisationsController.createOrganisation()

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - organisations
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.Organisation'
###
GET /organisations/:orgId                                 controllers.OrganisationsController.getOrganisation(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  summary: update an organisation
#  tags:
#    - organisations
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.UpdateOrganisation'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.Organisation'
###
POST /organisations/:orgId                                               controllers.OrganisationsController.updateOrganisation(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  summary: delete/deactivate an organisation
#  tags: 
#    - organisations
#  responses:
#    200:
#      description: success
###
DELETE /organisations/:orgId                                        controllers.OrganisationsController.deactivateOrganisation(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - organisations
#  operationId: getOrganisationUserList
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.UserStub'
###
GET /organisations/:orgId/users                                  controllers.OrganisationsController.getUsers(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  summary: assign a user to an organisation
#  tags: 
#    - organisations
#  operationId: inviteOrganisationUser
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.UserToOrganisationAssignment'
#  responses:
#    201:
#      description: successfully created invitation
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.InvitationResult'
###
POST /organisations/:orgId/invite                                  controllers.OrganisationsController.inviteUser(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - organisations
#  summary: Remove selected user's membership from selected organisation
#  operationId: removeOrganisationUser
#  responses:
#    200:
#      description: successfully removed user from organisation
###
DELETE /organisations/:orgId/users/:userId                           controllers.OrganisationsController.unassignUser(orgId: models.OrganisationId, userId: models.UserId)


#######
####### Invitations Private #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  summary: get detail of an invitation
#  operationId: getInvitation
#  tags: 
#    - invitations-private
#  responses:
#    400:
#      description: invalid invitation or invalid referenced user
#    200:
#      description: success if valid invitation
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.Invitation'
###
GET /invitations/:invitationId                          controllers.InvitationsController.getDetails(invitationId: models.InvitationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - invitations-private
#  operationId: acceptInvitation
#  requestBody:
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.AcceptInvitationRequest'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.Invitation'
###
POST /invitations/:invitationId/accept                  controllers.InvitationsController.accept(invitationId: models.InvitationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags: 
#    - invitations-private
#  operationId: declineInvitation
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.Invitation'
###
POST /invitations/:invitationId/decline                 controllers.InvitationsController.decline(invitationId: models.InvitationId)

#######
####### Invitations Public #######
#######

###
#  tags:
#    - invitations-public
#  summary: get status of an invitation
#  operationId: getInvitationStatus
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.InvitationStatusResponse'
#    400:
#      description: invalid or non existing invitation
###
GET /invitations/:invitationId/status               controllers.InvitationsController.getStatus(invitationId: models.InvitationId)

#######
####### Issue Importer Configurations #######
#######

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Get all importer configurations for organisation (optionally filtered by type)
#  operationId: getConfigs
#  parameters:
#    - name: orgId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Organisation ID
#    - name: type
#      in: query
#      required: false
#      schema:
#        type: string
#        enum: [gitlab, jira, plane]
#      description: Filter by importer type (gitlab, jira, or plane)
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/models.IssueImporterConfigResponse'
#    403:
#      description: user not authorized (requires OrganisationAdministrator role)
###
GET /organisations/:orgId/issue-importers                                                       controllers.IssueImporterConfigController.getConfigs(orgId: models.OrganisationId, type: Option[String])

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Get importer configuration by ID
#  operationId: getConfig
#  parameters:
#    - name: orgId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Organisation ID
#    - name: configId
#      in: path
#      required: true
#      schema:
#        type: string
#      description: Importer configuration ID
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.IssueImporterConfigResponse'
#    403:
#      description: access denied (user not in organisation or not an admin)
#    404:
#      description: configuration not found
###
GET /organisations/:orgId/issue-importers/:configId                                             controllers.IssueImporterConfigController.getConfig(orgId: models.OrganisationId, configId: models.IssueImporterConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Get importer configuration for a specific project
#  operationId: getConfigForProject
#  parameters:
#    - name: orgId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Organisation ID
#    - name: projectId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Project ID
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.IssueImporterConfigResponse'
#    403:
#      description: access denied (user not in organisation or not an admin)
#    404:
#      description: no configuration found for this project
###
GET /organisations/:orgId/projects/:projectId/issue-importer                                    controllers.IssueImporterConfigController.getConfigForProject(orgId: models.OrganisationId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Create new importer configuration (Organisation Admin only)
#  operationId: createConfig
#  parameters:
#    - name: orgId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Organisation ID
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.CreateIssueImporterConfig'
#  responses:
#    201:
#      description: configuration created
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.IssueImporterConfigResponse'
#    400:
#      description: invalid request (missing required fields or validation failed)
#    403:
#      description: user not authorized (requires OrganisationAdministrator role)
###
POST /organisations/:orgId/issue-importers                                                      controllers.IssueImporterConfigController.createConfig(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Test connectivity to external service
#  description: Tests connectivity to GitLab/Jira/Plane without saving configuration. Useful for validating credentials before creating a config. Requires only OrganisationMember role since nothing is saved.
#  operationId: testConnectivity
#  parameters:
#    - name: orgId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Organisation ID
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.CreateIssueImporterConfig'
#  responses:
#    200:
#      description: connectivity test successful
#      content:
#        application/json:
#          schema:
#            type: object
#            properties:
#              status:
#                type: string
#                enum: [success]
#              message:
#                type: string
#                example: Successfully connected to GitLab
#    400:
#      description: connectivity test failed or validation error
#      content:
#        application/json:
#          schema:
#            type: object
#            properties:
#              status:
#                type: string
#                enum: [error]
#              message:
#                type: string
#                example: Authentication failed - Invalid access token
#              error:
#                type: string
#                enum: [connection_failed, authentication_failed, unknown_host, timeout, connection_error, validation_failed]
###
POST /organisations/:orgId/issue-importers/test                                                 controllers.IssueImporterConfigController.testConnectivity(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Test connectivity for existing configuration
#  description: Tests connectivity to external service using credentials from an existing saved configuration. Useful for validating that saved credentials still work or testing after updating configuration. Requires only OrganisationMember role since nothing is modified.
#  operationId: testExistingConfig
#  parameters:
#    - name: orgId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Organisation ID
#    - name: configId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Issue importer configuration ID
#  responses:
#    200:
#      description: connectivity test successful
#      content:
#        application/json:
#          schema:
#            type: object
#            properties:
#              status:
#                type: string
#                enum: [success]
#              message:
#                type: string
#                example: Successfully connected to GitLab
#    400:
#      description: connectivity test failed
#      content:
#        application/json:
#          schema:
#            type: object
#            properties:
#              status:
#                type: string
#                enum: [error]
#              message:
#                type: string
#                example: Authentication failed - Invalid access token
#              error:
#                type: string
#                enum: [connection_failed, authentication_failed, unknown_host, timeout, connection_error]
#    403:
#      description: Configuration does not belong to organization
#    404:
#      description: Configuration not found
###
POST /organisations/:orgId/issue-importers/:configId/test                                       controllers.IssueImporterConfigController.testExistingConfig(orgId: models.OrganisationId, configId: models.IssueImporterConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: List available projects from external service
#  description: Fetches list of accessible projects from the configured external service (GitLab/Jira/Plane/GitHub). Returns flat list of projects for all importer types. GitLab/GitHub/Plane projects include available labels and states to help configure filters. GitLab states are "opened", "closed", "all". GitHub states are "open", "closed", "all". Plane states are custom per project. Jira returns basic project information only. Requires only OrganisationMember role since it only reads from external API.
#  operationId: listProjects
#  parameters:
#    - name: orgId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Organisation ID
#    - name: configId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Issue importer configuration ID
#  responses:
#    200:
#      description: Successfully fetched projects/workspaces
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.ListProjectsResponse'
#    400:
#      description: Failed to fetch projects from external API
#      content:
#        application/json:
#          schema:
#            type: object
#            properties:
#              status:
#                type: string
#                enum: [error]
#              message:
#                type: string
#                example: Failed to fetch GitLab projects - HTTP 401
#              error:
#                type: string
#                enum: [list_projects_failed]
#    403:
#      description: Configuration does not belong to organization
#    404:
#      description: Configuration not found
###
GET /organisations/:orgId/issue-importers/:configId/projects                                    controllers.IssueImporterConfigController.listProjects(orgId: models.OrganisationId, configId: models.IssueImporterConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: List GitHub resource owners (user + organizations)
#  description: Lists available resource owners for a GitHub token. Returns the authenticated user plus all organizations they have access to. This helps users select the correct resource owner when creating organization-scoped fine-grained tokens. GitHub-specific endpoint.
#  operationId: listGithubResourceOwners
#  parameters:
#    - name: orgId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Organisation ID
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.CreateIssueImporterConfig'
#  responses:
#    200:
#      description: Successfully fetched resource owners
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.ListProjectsResponse'
#    400:
#      description: Failed to fetch resource owners or invalid importer type
#      content:
#        application/json:
#          schema:
#            type: object
#            properties:
#              status:
#                type: string
#                enum: [error]
#              message:
#                type: string
#              error:
#                type: string
#                enum: [list_resource_owners_failed, missing_access_token, invalid_importer_type]
###
POST /organisations/:orgId/issue-importers/github/resource-owners                               controllers.IssueImporterConfigController.listGithubResourceOwners(orgId: models.OrganisationId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Update importer configuration (Organisation Admin only)
#  operationId: updateConfig
#  parameters:
#    - name: orgId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Organisation ID
#    - name: configId
#      in: path
#      required: true
#      schema:
#        type: string
#      description: Importer configuration ID
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.UpdateIssueImporterConfig'
#  responses:
#    200:
#      description: configuration updated
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.IssueImporterConfigResponse'
#    400:
#      description: invalid request (missing required fields or validation failed)
#    403:
#      description: user not authorized (requires OrganisationAdministrator role)
#    404:
#      description: configuration not found
###
PUT /organisations/:orgId/issue-importers/:configId                                             controllers.IssueImporterConfigController.updateConfig(orgId: models.OrganisationId, configId: models.IssueImporterConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Delete importer configuration (Organisation Admin only)
#  operationId: deleteConfig
#  parameters:
#    - name: orgId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Organisation ID
#    - name: configId
#      in: path
#      required: true
#      schema:
#        type: string
#      description: Importer configuration ID
#  responses:
#    204:
#      description: configuration deleted successfully (no content)
#    400:
#      description: validation failed
#      content:
#        application/json:
#          schema:
#            type: object
#            properties:
#              error:
#                type: string
#                example: validation_failed
#              message:
#                type: string
#              field:
#                type: string
#    403:
#      description: user not authorized (requires OrganisationAdministrator role)
#      content:
#        application/json:
#          schema:
#            type: object
#            properties:
#              error:
#                type: string
#                example: access_denied
#              message:
#                type: string
#              configId:
#                type: string
#    404:
#      description: configuration not found
#      content:
#        application/json:
#          schema:
#            type: object
#            properties:
#              error:
#                type: string
#                example: config_not_found
#              message:
#                type: string
#              configId:
#                type: string
###
DELETE /organisations/:orgId/issue-importers/:configId                                          controllers.IssueImporterConfigController.deleteConfig(orgId: models.OrganisationId, configId: models.IssueImporterConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Force immediate tag refresh for a project
#  description: Triggers an immediate tag refresh for a specific project mapping. Sends a message to the worker to fetch tags from the external service (GitLab/Jira/Plane/GitHub) right away, bypassing the scheduled check interval. Tags will be updated within seconds. Requires only OrganisationMember role as this is a read-like operation.
#  operationId: refreshTags
#  parameters:
#    - name: orgId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Organisation ID
#    - name: configId
#      in: path
#      required: true
#      schema:
#        type: string
#      description: Issue importer configuration ID
#    - name: projectId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Project ID
#  responses:
#    202:
#      description: Refresh request accepted - tags will be updated immediately
#      content:
#        application/json:
#          schema:
#            type: object
#            properties:
#              status:
#                type: string
#                enum: [accepted]
#              message:
#                type: string
#                example: Tag refresh triggered immediately. Tags will be updated shortly.
#              configId:
#                type: string
#              projectId:
#                type: string
#              importerType:
#                type: string
#                enum: [gitlab, jira, plane, github]
#    403:
#      description: Configuration does not belong to organization
#    404:
#      description: Configuration not found or project not mapped to configuration
#      content:
#        application/json:
#          schema:
#            type: object
#            properties:
#              status:
#                type: string
#                enum: [error]
#              message:
#                type: string
#              error:
#                type: string
#                enum: [config_not_found, project_not_found]
#              configId:
#                type: string
#              projectId:
#                type: string
###
POST /organisations/:orgId/issue-importers/:configId/projects/:projectId/refresh-tags         controllers.IssueImporterConfigController.refreshTags(orgId: models.OrganisationId, configId: models.IssueImporterConfigId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Add project mapping to configuration (Organisation Admin only)
#  operationId: addProjectMapping
#  parameters:
#    - name: orgId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Organisation ID
#    - name: configId
#      in: path
#      required: true
#      schema:
#        type: string
#      description: Importer configuration ID
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.CreateProjectMapping'
#  responses:
#    200:
#      description: project mapping added
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.IssueImporterConfigResponse'
#    400:
#      description: invalid request (missing required fields or validation failed)
#    403:
#      description: user not authorized (requires OrganisationAdministrator role)
#    404:
#      description: configuration not found
###
POST /organisations/:orgId/issue-importers/:configId/projects                                   controllers.IssueImporterConfigController.addProjectMapping(orgId: models.OrganisationId, configId: models.IssueImporterConfigId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Update project mapping in configuration (Organisation Admin only)
#  operationId: updateProjectMapping
#  parameters:
#    - name: orgId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Organisation ID
#    - name: configId
#      in: path
#      required: true
#      schema:
#        type: string
#      description: Importer configuration ID
#    - name: projectId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Project ID
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/models.UpdateProjectMapping'
#  responses:
#    200:
#      description: project mapping updated
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.IssueImporterConfigResponse'
#    400:
#      description: invalid request (missing required fields or validation failed)
#    403:
#      description: user not authorized (requires OrganisationAdministrator role)
#    404:
#      description: configuration not found or project not found in mapping
###
PUT /organisations/:orgId/issue-importers/:configId/projects/:projectId                         controllers.IssueImporterConfigController.updateProjectMapping(orgId: models.OrganisationId, configId: models.IssueImporterConfigId, projectId: models.ProjectId)

###
#  security:
#    - bearerHttpAuthentication: []
#  tags:
#    - issue-importers
#  summary: Remove project mapping from configuration (Organisation Admin only)
#  operationId: removeProjectMapping
#  parameters:
#    - name: orgId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Organisation ID
#    - name: configId
#      in: path
#      required: true
#      schema:
#        type: string
#      description: Importer configuration ID
#    - name: projectId
#      in: path
#      required: true
#      schema:
#        type: string
#        format: uuid
#      description: Project ID
#  responses:
#    200:
#      description: project mapping removed
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/models.IssueImporterConfigResponse'
#    403:
#      description: user not authorized (requires OrganisationAdministrator role)
#    404:
#      description: configuration not found or project not found in mapping
###
DELETE /organisations/:orgId/issue-importers/:configId/projects/:projectId                      controllers.IssueImporterConfigController.removeProjectMapping(orgId: models.OrganisationId, configId: models.IssueImporterConfigId, projectId: models.ProjectId)

#######
####### Static Files #######
#######

# ~~~~
# Map static resources from the /public folder to the /assets URL path

### NoDocs ###
GET /assets/*file                          controllers.Assets.versioned(path="/public", file: Asset)

#######
####### OpenAPI | Swagger #######
#######

### NoDocs ###
GET /docs/swagger-ui/*file        controllers.Assets.at(path:String="/public/lib/swagger-ui", file:String)

