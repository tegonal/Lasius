# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
# Use your own 256-bit key
play.http.secret.key = "Npf2C14t6><ZcBjT95imn30<cbjN4fUbxhprkNvs1r=44TGtO/]0;;[cWecmAehb"

# Use your own 256-bit sign key
play.http.session = {
    private-key = "SI+YPcm7YvN4wTOzM7yf5akHKt9rlUtlN2tBI7Wxj47nazFyH2n7xNp3MJRV0o4t"
    max-age=P1D
}

lasius = {
  initialize-views-on-startup = true

  title = Lasius
  title = ${?LASIUS_TITLE}

  instance = Dev
  instance = ${?LASIUS_INSTANCE}

  security = {

    # Restrict access to this lasius instance
    access-restriction = {
        # Restrict access to users authenticated with an email address matching the defined regex
        email-regex = ".*"
    }

    # list of additionally allowed issuers. Excluding internal oauth provider which will automatically be allowed if enabled
    # For every issuer, a public/private key or jwks url is required if the token should be signed (which is suggested)
    external-issuers = [
        # JWT Issuer:
        #{
        # type = "jwt-issuer-config"
        # issuer = ""
        # One-of:
        #   # expect Public key in X.509 format, base64 encoded
        #   public-key = ""
        #   private-key = ""
        #   jwk = {
        #      url = ""
        #      # JWK Configuration options based on https://github.com/auth0/jwks-rsa-java/blob/master/EXAMPLES.md#provider-configuration
        #      # Optional
        #      cache = {
        #          cacheSize = 10
        #          expiresIn = 24 hours
        #      }
        #      # Optional
        #      rate-limit = {
        #          bucket-size = 10
        #          refill-rate = 1 minute
        #      }
        #      # Optional
        #      timeouts = {
        #          connect-timeout = 10 seconds
        #          read-timeout = 60 seconds
        #      }
        #   }
        #}
        # Opaque Token Issuer:
        #{
        #    type = "opaque-token-issuer-config"
        #    issuer = ""
        #    client-id = ""
        #    client-secret = ""
        #    introspection-uri = ""
        #    user-info-uri = ""
        #}
    ]

    # internal oauth2 provider
    oauth-2-provider = {
      enabled = true

      allow-register-users = true
      # Configure custom client_id and secret in case internal oauth2 provider should be used
      client-id = "UNSpnFhnTKUD6I9Ra3iu6AwIYtwwvMJc"
      client-secret = "YygBrtkOLqpt5Bje6nTT3d4tJ5fmfdbd",
      authorization-code = {
        lifespan = PT1M # 1 minute
      },
      jwt-token = {
        issuer = "lasius"
        lifespan = P1D # 1 day
        # Use your own 256-bit sign key
        private-key = "TOeHiiEAoaHxznfTHC97qZrm3JKk0k92RJGGJNcB+OcmefADp9RLKyOfg8f/66Kw"
      }
    }
  }
}

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

play.allowGlobalApplication = false

play.modules.enabled += "modules.LasiusModule"

play.cache = {
    createBoundCaches = false
    bindCaches = ["jwk", "opaque-token-issuer", "user-info"]
}

db = {
    # initialize base data if no data exists
    clean_database_on_startup = ${?LASIUS_INITIALIZE_DATA}
    initialize_data = true

    # clean database on startup
    clean_database_on_startup = false
    clean_database_on_startup = ${?LASIUS_CLEAN_DATABASE_ON_STARTUP}

    # data loader used to intialize data in database
    data_loader = "core.db.InitialBaseDataLoader"

    # Enable support if you run a mongodb replicaset
    support_transactions = false
    support_transactions = ${?LASIUS_SUPPORTS_TRANSACTIONS}
}

play.http.context="/backend/"

play.application.loader = core.CustomApplicationLoader

play.filters.hosts = {
  allowed = ["."]
  allowed = ${?ALLOWED_HOSTS}
}

# override pidfile to we can restart app in container
play.server.pidfile.path=/dev/null

# ReactiveMongo
play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoModule"

mongodb.uri = "mongodb://localhost:27017/lasius"
mongodb.uri = ${?MONGODB_URI}

play.server.websocket.frame.maxLength=2m

pekko = {
  loglevel = "INFO"
  http = {
    parsing = {
      max-uri-length = 96k
      max-header-value-length = 16k
    }
  }
  actor = {
    serializers = {
      persisted-event-json = "actors.serializers.PersistedEventJsonSerializer"
      logged-in-state-json = "actors.serializers.LoggedInStateJsonSerializer"
      user-time-booking-json = "actors.serializers.UserTimeBookingJsonSerializer"
    }

    serialization-bindings = {
      "models.PersistedEvent" = persisted-event-json
      "domain.LoginStateAggregate$LoggedInState" = logged-in-state-json
      "domain.UserTimeBookingAggregate$UserTimeBooking" = user-time-booking-json
    }
  }
}

mongo-async-driver = {
  pekko = {
    loglevel = "WARNING"
  }
}
application.global = core.CustomApplicationLoader

# Pekko mongo configuration
pekko.persistence.journal.plugin = "pekko-contrib-mongodb-persistence-journal"

pekko-contrib-mongodb-persistence-journal = {
  event-adapters = {
    persisted-event-adapter = "models.adapters.PersistedEventAdapter"
  }
  event-adapter-bindings = {
    "models.PersistedEvent" = persisted-event-adapter
  }
}

pekko.persistence.snapshot-store.plugin = "pekko-contrib-mongodb-persistence-snapshot"

pekko-contrib-mongodb-persistence-snapshot = {
    snapshot-is-optional = false
}

pekko.contrib.persistence.mongodb.mongo = {
  mongouri = "mongodb://localhost:27017/lasius"
  mongouri = ${?MONGODB_URI}
  journal-collection = "journal"
  journal-index = "journal_index"
  snaps-collection = "snapshots"
  snaps-index = "snaps_index"
  journal-write-concern = "Acknowledged"

  # upgrade journal from 0.x to 1.x
  journal-automatic-upgrade = false

  # Legacy serialization (0.x)
  use-legacy-serialization = false
}

pekko-contrib-persistence-dispatcher.thread-pool-executor = {
  core-pool-size-min = 2
  core-pool-size-factor = 2
  core-pool-size-max = 16
}

play.filters.csrf.cookie = {
    name = "PLAY_SESSION_CSRF"
    secure = true
    httpOnly = true
}

play.filters.enabled += "play.filters.gzip.GzipFilter"

play.filters.gzip = {

    contentType = {

        # If non empty, then a response will only be compressed if its content type is in this list.
        whiteList = [ "text/*", "application/javascript", "application/json" ]

        # The black list is only used if the white list is empty.
        # Compress all responses except the ones whose content type is in this list.
        blackList = []
    }
}

lasius.plane = {
  api_key = ${?PLANE_API_KEY}
  workspace = ${?PLANE_WORKSPACE}
  base_url = ${?PLANE_BASE_URL}
  project_id= ${?PLANE_PROJECT_ID}
}